package firo

import (
	"bytes"
	"testing"
)

func TestGenerateCoinbase(t *testing.T) {
	tests := []struct {
		addresses    []string
		amounts      []uint64
		height       uint64
		nTime        uint64
		extraData    []byte
		extraPayload string
		prefixP2PKH  []byte
		prefixP2SH   []byte
		coinbaseHex  []byte
		coinbaseHash []byte
	}{

		{
			addresses: []string{
				"aFrAVZFr8pva5mG8XKaUH8EXcFVVNxLiuB",
				"a7MaoPUu68cUg6SHjSXHzz4bJoPa4Fr9wp",
				"a4C7eg6NGtsR4d16cACCTEbJNVJMDJQWMx",
			},
			amounts: []uint64{187500000, 437500000, 625000000},
			height:  481899,
			nTime:   1654104368,
			// extraData:    "/WoolyPooly/",
			// 2f576f6f6c79506f6f6c792f
			extraData: []byte{
				0x00, 0x00, 0x00, 0x00, 0x0c, 0x2f, 0x57, 0x6f, 0x6f, 0x6c, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x79,
				0x2f,
			},
			extraPayload: "02006b5a0700f7d980f73025972cf5629885f543712ff66cb18395362e871e1ef869f674dd87d9b06eba31fce1d85bec4d6741eb056c517ba58f6f03dea04d6809f280f9adfa",
			prefixP2PKH:  mainnetPrefixP2PKH,
			prefixP2SH:   mainnetPrefixP2SH,
			coinbaseHex: []byte{
				0x03, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1b, 0x03, 0x6b, 0x5a, 0x07, 0x04, 0x30,
				0xa1, 0x97, 0x62, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2f, 0x57, 0x6f, 0x6f, 0x6c, 0x79, 0x50,
				0x6f, 0x6f, 0x6c, 0x79, 0x2f, 0xff, 0xff, 0xff, 0xff, 0x03, 0xe0, 0x05, 0x2d, 0x0b, 0x00, 0x00,
				0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xa5, 0xfe, 0xd1, 0x2b, 0x0f, 0xeb, 0x74, 0x16, 0x4a, 0x20,
				0x4a, 0x11, 0xfc, 0xa3, 0xcd, 0x72, 0x2f, 0x37, 0x27, 0x58, 0x88, 0xac, 0x60, 0xb8, 0x13, 0x1a,
				0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x48, 0xd6, 0x09, 0xea, 0x2d, 0x5a, 0x5b, 0xff,
				0x42, 0x8e, 0x0c, 0x23, 0x04, 0xb9, 0xf7, 0xfb, 0xd5, 0x68, 0xcf, 0xae, 0x88, 0xac, 0x40, 0xbe,
				0x40, 0x25, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x26, 0x23, 0x40, 0xfc, 0x2a, 0x99,
				0x26, 0x3e, 0x43, 0xb4, 0x85, 0x9e, 0x0d, 0x4d, 0x48, 0x14, 0x14, 0xc5, 0xae, 0xdc, 0x88, 0xac,
				0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x6b, 0x5a, 0x07, 0x00, 0xf7, 0xd9, 0x80, 0xf7, 0x30,
				0x25, 0x97, 0x2c, 0xf5, 0x62, 0x98, 0x85, 0xf5, 0x43, 0x71, 0x2f, 0xf6, 0x6c, 0xb1, 0x83, 0x95,
				0x36, 0x2e, 0x87, 0x1e, 0x1e, 0xf8, 0x69, 0xf6, 0x74, 0xdd, 0x87, 0xd9, 0xb0, 0x6e, 0xba, 0x31,
				0xfc, 0xe1, 0xd8, 0x5b, 0xec, 0x4d, 0x67, 0x41, 0xeb, 0x05, 0x6c, 0x51, 0x7b, 0xa5, 0x8f, 0x6f,
				0x03, 0xde, 0xa0, 0x4d, 0x68, 0x09, 0xf2, 0x80, 0xf9, 0xad, 0xfa,
			},
			coinbaseHash: []byte{
				0xe7, 0xf9, 0x38, 0x2a, 0x0c, 0xdc, 0x0d, 0x4d, 0x9e, 0xd4, 0xd5, 0x6a, 0xab, 0xbc, 0x58, 0x65,
				0x1e, 0xb3, 0x11, 0xff, 0x52, 0x82, 0x49, 0x93, 0xd1, 0x69, 0xf3, 0xae, 0x14, 0xe5, 0x2a, 0xd4,
			},
		},
		{
			addresses: []string{
				"a8ULhhDgfdSiXJhSZVdhb8EuDc6R3ogsaM",
				"a2QhvbeFrui4bwhwTX931YcYb9cFK674gn",
				"aFrAVZFr8pva5mG8XKaUH8EXcFVVNxLiuB",
			},
			amounts: []uint64{625000226, 437500000, 187500000},
			height:  482105,
			nTime:   1654168961,
			// extraData:    "2Miners https://2miners.com",
			// 324d696e6572732068747470733a2f2f326d696e6572732e636f6d
			extraData: []byte{
				0x07, 0x00, 0x00, 0x00, 0x00, 0x34, 0x29, 0xa9, 0x1b, 0x32, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73,
				0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x32, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73,
				0x2e, 0x63, 0x6f, 0x6d,
			},
			extraPayload: "0200395b0700f849ee0fb330250ee88343131d889c4fa0e25d178a8721ad3528457f6d68314c6b3c8b2be973e6846433dabbab829738e529dc3bd9dc098ba8cb9308678406ba",
			prefixP2PKH:  mainnetPrefixP2PKH,
			prefixP2SH:   mainnetPrefixP2SH,
			coinbaseHex: []byte{
				0x03, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2e, 0x03, 0x39, 0x5b, 0x07, 0x04, 0x81,
				0x9d, 0x98, 0x62, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x34, 0x29, 0xa9, 0x1b, 0x32, 0x4d, 0x69,
				0x6e, 0x65, 0x72, 0x73, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x32, 0x6d, 0x69,
				0x6e, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xff, 0xff, 0xff, 0xff, 0x03, 0x22, 0xbf, 0x40,
				0x25, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x55, 0x15, 0x4e, 0xc4, 0x38, 0x5f, 0x71,
				0xc4, 0xa2, 0x84, 0x73, 0x1c, 0xaf, 0xaf, 0x5d, 0x19, 0x40, 0x6c, 0x03, 0x05, 0x88, 0xac, 0x60,
				0xb8, 0x13, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x12, 0x94, 0x9a, 0xd1, 0xf4,
				0x3b, 0x77, 0x0d, 0x08, 0x60, 0x46, 0x6c, 0xfb, 0x5a, 0x30, 0xd8, 0x7f, 0xb1, 0x66, 0xf7, 0x88,
				0xac, 0xe0, 0x05, 0x2d, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xa5, 0xfe, 0xd1,
				0x2b, 0x0f, 0xeb, 0x74, 0x16, 0x4a, 0x20, 0x4a, 0x11, 0xfc, 0xa3, 0xcd, 0x72, 0x2f, 0x37, 0x27,
				0x58, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x39, 0x5b, 0x07, 0x00, 0xf8, 0x49,
				0xee, 0x0f, 0xb3, 0x30, 0x25, 0x0e, 0xe8, 0x83, 0x43, 0x13, 0x1d, 0x88, 0x9c, 0x4f, 0xa0, 0xe2,
				0x5d, 0x17, 0x8a, 0x87, 0x21, 0xad, 0x35, 0x28, 0x45, 0x7f, 0x6d, 0x68, 0x31, 0x4c, 0x6b, 0x3c,
				0x8b, 0x2b, 0xe9, 0x73, 0xe6, 0x84, 0x64, 0x33, 0xda, 0xbb, 0xab, 0x82, 0x97, 0x38, 0xe5, 0x29,
				0xdc, 0x3b, 0xd9, 0xdc, 0x09, 0x8b, 0xa8, 0xcb, 0x93, 0x08, 0x67, 0x84, 0x06, 0xba,
			},
			coinbaseHash: []byte{
				0xe4, 0x3c, 0x49, 0x67, 0x96, 0x2a, 0xe9, 0xe9, 0xf0, 0x79, 0x12, 0x94, 0xcb, 0x96, 0x96, 0x82,
				0xee, 0x45, 0x41, 0x51, 0x6d, 0x53, 0xe4, 0x48, 0xed, 0x69, 0xd9, 0x20, 0x4f, 0x40, 0xd6, 0xb1,
			},
		},
	}

	for i, tt := range tests {
		coinbaseHex, coinbaseHash, err := GenerateCoinbase(tt.addresses, tt.amounts, tt.height,
			tt.nTime, tt.extraData, tt.extraPayload, tt.prefixP2PKH, tt.prefixP2SH)
		if err != nil {
			t.Errorf("failed on %d: GenerateCoinbase: %v", i, err)
		} else if bytes.Compare(coinbaseHex, tt.coinbaseHex) != 0 {
			t.Errorf("failed on %d: coinbase hex mismatch: have %x, want %x", i, coinbaseHex, tt.coinbaseHex)
		} else if bytes.Compare(coinbaseHash, tt.coinbaseHash) != 0 {
			t.Errorf("failed on %d: coinbase hash mismatch: have %x, want %x", i, coinbaseHash, tt.coinbaseHash)
		}
	}
}
