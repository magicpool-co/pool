package flux

import (
	"bytes"
	"testing"
)

func TestGenerateCoinbase(t *testing.T) {
	tests := []struct {
		addresses    []string
		amounts      []uint64
		height       uint64
		extraData    string
		prefixP2PKH  []byte
		prefixP2SH   []byte
		coinbaseHex  []byte
		coinbaseHash []byte
	}{
		{
			addresses: []string{
				"t1JKRwXGfKTGfPV1z48rvoLyabk31z3xwHa",
				"t1c83Nc73up4iTu8Zs4kh647xdV2EdCwogd",
				"t1TRUNKQMx1DVzym4d2Ay5E1dudEcHiyk9C",
				"t1eQCYUZ9yhAy5QH4huG8MfnZzk3nz8Dj6b",
			},
			amounts: []uint64{
				3750000000,
				562500000,
				937500000,
				2250000000,
			},
			height:      1134187,
			extraData:   "2Miners https://2miners.com",
			prefixP2PKH: mainnetPrefixP2PKH,
			prefixP2SH:  mainnetPrefixP2SH,
			coinbaseHex: []byte{
				0x04, 0x00, 0x00, 0x80, 0x85, 0x20, 0x2f, 0x89, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x20, 0x03, 0x6b,
				0x4e, 0x11, 0x00, 0x32, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73,
				0x3a, 0x2f, 0x2f, 0x32, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xff, 0xff,
				0xff, 0xff, 0x04, 0x80, 0x75, 0x84, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x04,
				0xe2, 0x69, 0x9c, 0xec, 0x5f, 0x44, 0x28, 0x05, 0x40, 0xfb, 0x75, 0x2c, 0x76, 0x60, 0xaa, 0x3b,
				0xa8, 0x57, 0xcc, 0x88, 0xac, 0xa0, 0x11, 0x87, 0x21, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9,
				0x14, 0xc8, 0x2d, 0x43, 0x3d, 0x5b, 0x39, 0x0d, 0x31, 0xf9, 0x15, 0xe8, 0x03, 0xf0, 0x78, 0x90,
				0x81, 0x90, 0x6a, 0x01, 0x8d, 0x88, 0xac, 0x60, 0x1d, 0xe1, 0x37, 0x00, 0x00, 0x00, 0x00, 0x19,
				0x76, 0xa9, 0x14, 0x68, 0xc0, 0x11, 0x16, 0xec, 0x9b, 0x98, 0x11, 0x26, 0x7d, 0xad, 0xf5, 0xc3,
				0x77, 0x35, 0xff, 0xe5, 0x7a, 0xb9, 0x26, 0x88, 0xac, 0x80, 0x46, 0x1c, 0x86, 0x00, 0x00, 0x00,
				0x00, 0x19, 0x76, 0xa9, 0x14, 0xe1, 0x2b, 0xd3, 0x11, 0x53, 0x8d, 0x45, 0xd2, 0xaa, 0x34, 0xb0,
				0xa6, 0x32, 0xfb, 0x8c, 0x53, 0xaa, 0xaa, 0x2b, 0x19, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			coinbaseHash: []byte{
				0x37, 0xe7, 0x93, 0x4e, 0xa9, 0x8f, 0x8e, 0xe7, 0x82, 0x92, 0xd2, 0xb9, 0x19, 0x93, 0xc8, 0x60,
				0xc4, 0x78, 0x65, 0x37, 0x17, 0xd4, 0x6c, 0x01, 0xbe, 0x8e, 0x60, 0xfe, 0xcb, 0x2a, 0xcf, 0x29,
			},
		},
		{
			addresses: []string{
				"t1ZSUsQv2dHmAdsHPTcfd3UAigyreaYTxjq",
				"t1aQpj1jyZrWx44iBJJEWNjc2iV7aKxFFkd",
				"t1bKbqjUR5RZR6mhDHFyxbYTR536YeBZUHz",
				"t1gqYSLaas4d4YnxiaEDtVRmge3ZPSGy639",
				"t1JpivuMpmZG6xCEEL4Rs5BB6ntNSUUJg6r",
				"t1LFnSTDr6qU3pf2d4UECmqJXiF1KchEkRL",
			},
			amounts: []uint64{
				3675000000,
				562500000,
				937500000,
				2250000000,
				37500000,
				37500000,
			},
			height:      1134309,
			extraData:   "MinerPool https://flux.minerpool.org",
			prefixP2PKH: mainnetPrefixP2PKH,
			prefixP2SH:  mainnetPrefixP2SH,
			coinbaseHex: []byte{
				0x04, 0x00, 0x00, 0x80, 0x85, 0x20, 0x2f, 0x89, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x29, 0x03, 0xe5,
				0x4e, 0x11, 0x00, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x20, 0x68, 0x74, 0x74,
				0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x70,
				0x6f, 0x6f, 0x6c, 0x2e, 0x6f, 0x72, 0x67, 0xff, 0xff, 0xff, 0xff, 0x06, 0xc0, 0x0c, 0x0c, 0xdb,
				0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xaa, 0xc1, 0xa7, 0xfa, 0x91, 0xab, 0x04, 0x13,
				0xf7, 0x99, 0xdd, 0xba, 0x40, 0xa4, 0x1e, 0xb8, 0x4b, 0x78, 0x0e, 0x13, 0x88, 0xac, 0xa0, 0x11,
				0x87, 0x21, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xb5, 0x69, 0x86, 0x38, 0x57, 0x77,
				0x23, 0xbf, 0xdd, 0x4e, 0xf9, 0x2d, 0xe1, 0xf1, 0x30, 0xee, 0xf0, 0xb7, 0xb2, 0x7b, 0x88, 0xac,
				0x60, 0x1d, 0xe1, 0x37, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xbf, 0x64, 0xd0, 0xac,
				0x3f, 0x8c, 0xe0, 0xc7, 0x02, 0xb2, 0xe9, 0xd6, 0x78, 0xa3, 0x5e, 0x4a, 0x78, 0x02, 0x80, 0x1d,
				0x88, 0xac, 0x80, 0x46, 0x1c, 0x86, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xfb, 0xe7,
				0x14, 0xf8, 0xcc, 0x06, 0xa7, 0x43, 0x65, 0xe2, 0x3b, 0x47, 0x8a, 0x37, 0x17, 0x2c, 0x31, 0x70,
				0x8d, 0xc3, 0x88, 0xac, 0x60, 0x34, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14,
				0x0a, 0x6c, 0xa8, 0x4c, 0x78, 0x4f, 0xcf, 0x8d, 0x06, 0xaa, 0x3b, 0xf1, 0x9d, 0x67, 0x91, 0x73,
				0x42, 0xe9, 0x59, 0x75, 0x88, 0xac, 0x60, 0x34, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76,
				0xa9, 0x14, 0x1a, 0x22, 0x1c, 0x9f, 0x3b, 0xc1, 0xa4, 0xc2, 0x05, 0x62, 0x7b, 0x06, 0x31, 0xb3,
				0xab, 0x23, 0x78, 0x31, 0x6d, 0xda, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			coinbaseHash: []byte{
				0xc2, 0x1d, 0x92, 0x8a, 0xc6, 0xdb, 0x70, 0x3a, 0x99, 0x5f, 0x3d, 0xd0, 0x3d, 0xf2, 0xa2, 0x90,
				0xf5, 0x44, 0x81, 0xad, 0x12, 0x9c, 0xc4, 0x33, 0xd6, 0xfd, 0xed, 0x2a, 0xbd, 0x82, 0xdd, 0x24,
			},
		},
	}

	for i, tt := range tests {
		coinbaseHex, coinbaseHash, err := GenerateCoinbase(tt.addresses, tt.amounts, tt.height,
			tt.extraData, tt.prefixP2PKH, tt.prefixP2SH)
		if err != nil {
			t.Errorf("failed on %d: GenerateCoinbase: %v", i, err)
		} else if bytes.Compare(coinbaseHex, tt.coinbaseHex) != 0 {
			t.Errorf("failed on %d: coinbase hex mismatch: have %x, want %x", i, coinbaseHex, tt.coinbaseHex)
		} else if bytes.Compare(coinbaseHash, tt.coinbaseHash) != 0 {
			t.Errorf("failed on %d: coinbase hash mismatch: have %x, want %x", i, coinbaseHash, tt.coinbaseHash)
		}
	}
}
