package crypto

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/rand"
	"crypto/sha256"
	"testing"

	secp256k1 "github.com/decred/dcrd/dcrec/secp256k1/v4"
	schnorr "github.com/decred/dcrd/dcrec/secp256k1/v4/schnorr"
)

func TestNonceRFC6979BCH(t *testing.T) {
	// test vectors come from:
	// https://github.com/trezor/trezor-crypto/blob/9fea8f8ab377dc514e40c6fd1f7c89a74c1d8dc6/tests.c#L432-L453
	tests := []struct {
		privKey []byte
		msg     string
		nonce   []byte
	}{
		{
			privKey: []byte{
				0xcc, 0xa9, 0xfb, 0xcc, 0x1b, 0x41, 0xe5, 0xa9,
				0x5d, 0x36, 0x9e, 0xaa, 0x6d, 0xdc, 0xff, 0x73,
				0xb6, 0x1a, 0x4e, 0xfa, 0xa2, 0x79, 0xcf, 0xc6,
				0x56, 0x7e, 0x8d, 0xaa, 0x39, 0xcb, 0xaf, 0x50,
			},
			msg: "sample",
			nonce: []byte{
				0x2d, 0xf4, 0x0c, 0xa7, 0x0e, 0x63, 0x9d, 0x89,
				0x52, 0x8a, 0x6b, 0x67, 0x0d, 0x9d, 0x48, 0xd9,
				0x16, 0x5f, 0xdc, 0x0f, 0xeb, 0xc0, 0x97, 0x40,
				0x56, 0xbd, 0xce, 0x19, 0x2b, 0x8e, 0x16, 0xa3,
			},
		},
		{
			privKey: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			},
			msg: "Satoshi Nakamoto",
			nonce: []byte{
				0x8f, 0x8a, 0x27, 0x6c, 0x19, 0xf4, 0x14, 0x96,
				0x56, 0xb2, 0x80, 0x62, 0x1e, 0x35, 0x8c, 0xce,
				0x24, 0xf5, 0xf5, 0x25, 0x42, 0x77, 0x26, 0x91,
				0xee, 0x69, 0x06, 0x3b, 0x74, 0xf1, 0x5d, 0x15,
			},
		},
		{
			privKey: []byte{
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
				0xba, 0xae, 0xdc, 0xe6, 0xaf, 0x48, 0xa0, 0x3b,
				0xbf, 0xd2, 0x5e, 0x8c, 0xd0, 0x36, 0x41, 0x40,
			},
			msg: "Satoshi Nakamoto",
			nonce: []byte{
				0x33, 0xa1, 0x9b, 0x60, 0xe2, 0x5f, 0xb6, 0xf4,
				0x43, 0x5a, 0xf5, 0x3a, 0x3d, 0x42, 0xd4, 0x93,
				0x64, 0x48, 0x27, 0x36, 0x7e, 0x64, 0x53, 0x92,
				0x85, 0x54, 0xf4, 0x3e, 0x49, 0xaa, 0x6f, 0x90,
			},
		},
		{
			privKey: []byte{
				0xf8, 0xb8, 0xaf, 0x8c, 0xe3, 0xc7, 0xcc, 0xa5,
				0xe3, 0x00, 0xd3, 0x39, 0x39, 0x54, 0x0c, 0x10,
				0xd4, 0x5c, 0xe0, 0x01, 0xb8, 0xf2, 0x52, 0xbf,
				0xbc, 0x57, 0xba, 0x03, 0x42, 0x90, 0x41, 0x81,
			},
			msg: "Alan Turing",
			nonce: []byte{
				0x52, 0x5a, 0x82, 0xb7, 0x0e, 0x67, 0x87, 0x43,
				0x98, 0x06, 0x75, 0x43, 0xfd, 0x84, 0xc8, 0x3d,
				0x30, 0xc1, 0x75, 0xfd, 0xc4, 0x5f, 0xde, 0xee,
				0x08, 0x2f, 0xe1, 0x3b, 0x1d, 0x7c, 0xfd, 0xf1,
			},
		},
		{
			privKey: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
			},
			msg: "All those moments will be lost in time, like tears in rain. Time to die...",
			nonce: []byte{
				0x38, 0xaa, 0x22, 0xd7, 0x23, 0x76, 0xb4, 0xdb,
				0xc4, 0x72, 0xe0, 0x6c, 0x3b, 0xa4, 0x03, 0xee,
				0x0a, 0x39, 0x4d, 0xa6, 0x3f, 0xc5, 0x8d, 0x88,
				0x68, 0x6c, 0x61, 0x1a, 0xba, 0x98, 0xd6, 0xb3,
			},
		},
		{
			privKey: []byte{
				0xe9, 0x16, 0x71, 0xc4, 0x62, 0x31, 0xf8, 0x33,
				0xa6, 0x40, 0x6c, 0xcb, 0xea, 0x0e, 0x3e, 0x39,
				0x2c, 0x76, 0xc1, 0x67, 0xba, 0xc1, 0xcb, 0x01,
				0x3f, 0x6f, 0x10, 0x13, 0x98, 0x04, 0x55, 0xc2,
			},
			msg: "There is a computer disease that anybody who works with computers knows about. It's a very serious disease and it interferes completely with the work. The trouble with computers is that you 'play' with them!",
			nonce: []byte{
				0x1f, 0x4b, 0x84, 0xc2, 0x3a, 0x86, 0xa2, 0x21,
				0xd2, 0x33, 0xf2, 0x52, 0x1b, 0xe0, 0x18, 0xd9,
				0x31, 0x86, 0x39, 0xd5, 0xb8, 0xbb, 0xd6, 0x37,
				0x4a, 0x8a, 0x59, 0x23, 0x2d, 0x16, 0xad, 0x3d,
			},
		},
	}

	for i, tt := range tests {
		hash := sha256.Sum256([]byte(tt.msg))
		nonce := nonceRFC6979BCH(tt.privKey, hash[:], nil)
		nonceBytes := nonce.Bytes()
		if !bytes.Equal(nonceBytes[:], tt.nonce) {
			t.Errorf("failed on %d: have %x, want %x", i, nonceBytes, tt.nonce)
		}
	}
}

func TestSchnorrSignBCH(t *testing.T) {
	tests := []struct {
		privKey []byte
		hash    []byte
		sig     []byte
	}{
		{
			privKey: []byte{
				0x12, 0xb0, 0x04, 0xff, 0xf7, 0xf4, 0xb6, 0x9e,
				0xf8, 0x65, 0x0e, 0x76, 0x7f, 0x18, 0xf1, 0x1e,
				0xde, 0x15, 0x81, 0x48, 0xb4, 0x25, 0x66, 0x07,
				0x23, 0xb9, 0xf9, 0xa6, 0x6e, 0x61, 0xf7, 0x47,
			},
			hash: []byte{
				0x52, 0x55, 0x68, 0x3d, 0xa5, 0x67, 0x90, 0x0b,
				0xfd, 0x3e, 0x78, 0x6e, 0xd8, 0x83, 0x6a, 0x4e,
				0x77, 0x63, 0xc2, 0x21, 0xbf, 0x1a, 0xc2, 0x0e,
				0xce, 0x2a, 0x51, 0x71, 0xb9, 0x19, 0x9e, 0x8a,
			},
			sig: []byte{
				0x2c, 0x56, 0x73, 0x1a, 0xc2, 0xf7, 0xa7, 0xe7,
				0xf1, 0x15, 0x18, 0xfc, 0x77, 0x22, 0xa1, 0x66,
				0xb0, 0x24, 0x38, 0x92, 0x4c, 0xa9, 0xd8, 0xb4,
				0xd1, 0x11, 0x34, 0x7b, 0x81, 0xd0, 0x71, 0x75,
				0x71, 0x84, 0x6d, 0xe6, 0x7a, 0xd3, 0xd9, 0x13,
				0xa8, 0xfd, 0xf9, 0xd8, 0xf3, 0xf7, 0x31, 0x61,
				0xa4, 0xc4, 0x8a, 0xe8, 0x1c, 0xb1, 0x83, 0xb2,
				0x14, 0x76, 0x5f, 0xeb, 0x86, 0xe2, 0x55, 0xce,
			},
		},
	}

	for i, tt := range tests {
		privKey := secp256k1.PrivKeyFromBytes(tt.privKey)
		sig := SchnorrSignBCH(privKey, tt.hash)
		if !bytes.Equal(sig.Serialize(), tt.sig) {
			t.Errorf("failed on %d: have %x, want %x", i, sig.Serialize(), tt.sig)
		}
	}
}

func TestSchnorrVerifyBCH(t *testing.T) {
	// test vectors are from:
	// https://gitlab.com/nexa/nexa/-/blob/nexa1.1.0.0/src/secp256k1/src/modules/schnorr/tests_impl.h
	tests := []struct {
		pubKey []byte
		hash   []byte
		sig    []byte
		valid  bool
	}{
		/* Test vector 1 */
		{
			pubKey: []byte{
				0x02,
				0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC,
				0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B, 0x07,
				0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9,
				0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17, 0x98,
			},
			hash: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			sig: []byte{
				0x78, 0x7A, 0x84, 0x8E, 0x71, 0x04, 0x3D, 0x28,
				0x0C, 0x50, 0x47, 0x0E, 0x8E, 0x15, 0x32, 0xB2,
				0xDD, 0x5D, 0x20, 0xEE, 0x91, 0x2A, 0x45, 0xDB,
				0xDD, 0x2B, 0xD1, 0xDF, 0xBF, 0x18, 0x7E, 0xF6,
				0x70, 0x31, 0xA9, 0x88, 0x31, 0x85, 0x9D, 0xC3,
				0x4D, 0xFF, 0xEE, 0xDD, 0xA8, 0x68, 0x31, 0x84,
				0x2C, 0xCD, 0x00, 0x79, 0xE1, 0xF9, 0x2A, 0xF1,
				0x77, 0xF7, 0xF2, 0x2C, 0xC1, 0xDC, 0xED, 0x05,
			},
			valid: true,
		},
		/* Test vector 2 */
		{
			pubKey: []byte{
				0x02,
				0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
				0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
				0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
				0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59,
			},
			hash: []byte{
				0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
				0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
				0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
				0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89,
			},
			sig: []byte{
				0x2A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
				0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
				0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
				0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
				0x1E, 0x51, 0xA2, 0x2C, 0xCE, 0xC3, 0x55, 0x99,
				0xB8, 0xF2, 0x66, 0x91, 0x22, 0x81, 0xF8, 0x36,
				0x5F, 0xFC, 0x2D, 0x03, 0x5A, 0x23, 0x04, 0x34,
				0xA1, 0xA6, 0x4D, 0xC5, 0x9F, 0x70, 0x13, 0xFD,
			},
			valid: true,
		},
		/* Test vector 3 */
		{
			pubKey: []byte{
				0x03,
				0xFA, 0xC2, 0x11, 0x4C, 0x2F, 0xBB, 0x09, 0x15,
				0x27, 0xEB, 0x7C, 0x64, 0xEC, 0xB1, 0x1F, 0x80,
				0x21, 0xCB, 0x45, 0xE8, 0xE7, 0x80, 0x9D, 0x3C,
				0x09, 0x38, 0xE4, 0xB8, 0xC0, 0xE5, 0xF8, 0x4B,
			},
			hash: []byte{
				0x5E, 0x2D, 0x58, 0xD8, 0xB3, 0xBC, 0xDF, 0x1A,
				0xBA, 0xDE, 0xC7, 0x82, 0x90, 0x54, 0xF9, 0x0D,
				0xDA, 0x98, 0x05, 0xAA, 0xB5, 0x6C, 0x77, 0x33,
				0x30, 0x24, 0xB9, 0xD0, 0xA5, 0x08, 0xB7, 0x5C,
			},
			sig: []byte{
				0x00, 0xDA, 0x9B, 0x08, 0x17, 0x2A, 0x9B, 0x6F,
				0x04, 0x66, 0xA2, 0xDE, 0xFD, 0x81, 0x7F, 0x2D,
				0x7A, 0xB4, 0x37, 0xE0, 0xD2, 0x53, 0xCB, 0x53,
				0x95, 0xA9, 0x63, 0x86, 0x6B, 0x35, 0x74, 0xBE,
				0x00, 0x88, 0x03, 0x71, 0xD0, 0x17, 0x66, 0x93,
				0x5B, 0x92, 0xD2, 0xAB, 0x4C, 0xD5, 0xC8, 0xA2,
				0xA5, 0x83, 0x7E, 0xC5, 0x7F, 0xED, 0x76, 0x60,
				0x77, 0x3A, 0x05, 0xF0, 0xDE, 0x14, 0x23, 0x80,
			},
			valid: true,
		},
		/* Test vector 4 */
		{
			pubKey: []byte{
				0x03,
				0xDE, 0xFD, 0xEA, 0x4C, 0xDB, 0x67, 0x77, 0x50,
				0xA4, 0x20, 0xFE, 0xE8, 0x07, 0xEA, 0xCF, 0x21,
				0xEB, 0x98, 0x98, 0xAE, 0x79, 0xB9, 0x76, 0x87,
				0x66, 0xE4, 0xFA, 0xA0, 0x4A, 0x2D, 0x4A, 0x34,
			},
			hash: []byte{
				0x4D, 0xF3, 0xC3, 0xF6, 0x8F, 0xCC, 0x83, 0xB2,
				0x7E, 0x9D, 0x42, 0xC9, 0x04, 0x31, 0xA7, 0x24,
				0x99, 0xF1, 0x78, 0x75, 0xC8, 0x1A, 0x59, 0x9B,
				0x56, 0x6C, 0x98, 0x89, 0xB9, 0x69, 0x67, 0x03,
			},
			sig: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x3B, 0x78, 0xCE, 0x56, 0x3F,
				0x89, 0xA0, 0xED, 0x94, 0x14, 0xF5, 0xAA, 0x28,
				0xAD, 0x0D, 0x96, 0xD6, 0x79, 0x5F, 0x9C, 0x63,
				0x02, 0xA8, 0xDC, 0x32, 0xE6, 0x4E, 0x86, 0xA3,
				0x33, 0xF2, 0x0E, 0xF5, 0x6E, 0xAC, 0x9B, 0xA3,
				0x0B, 0x72, 0x46, 0xD6, 0xD2, 0x5E, 0x22, 0xAD,
				0xB8, 0xC6, 0xBE, 0x1A, 0xEB, 0x08, 0xD4, 0x9D,
			},
			valid: true,
		},
		/* Test vector 4b */
		{
			pubKey: []byte{
				0x03,
				0x1B, 0x84, 0xC5, 0x56, 0x7B, 0x12, 0x64, 0x40,
				0x99, 0x5D, 0x3E, 0xD5, 0xAA, 0xBA, 0x05, 0x65,
				0xD7, 0x1E, 0x18, 0x34, 0x60, 0x48, 0x19, 0xFF,
				0x9C, 0x17, 0xF5, 0xE9, 0xD5, 0xDD, 0x07, 0x8F,
			},
			hash: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			sig: []byte{
				0x52, 0x81, 0x85, 0x79, 0xAC, 0xA5, 0x97, 0x67,
				0xE3, 0x29, 0x1D, 0x91, 0xB7, 0x6B, 0x63, 0x7B,
				0xEF, 0x06, 0x20, 0x83, 0x28, 0x49, 0x92, 0xF2,
				0xD9, 0x5F, 0x56, 0x4C, 0xA6, 0xCB, 0x4E, 0x35,
				0x30, 0xB1, 0xDA, 0x84, 0x9C, 0x8E, 0x83, 0x04,
				0xAD, 0xC0, 0xCF, 0xE8, 0x70, 0x66, 0x03, 0x34,
				0xB3, 0xCF, 0xC1, 0x8E, 0x82, 0x5E, 0xF1, 0xDB,
				0x34, 0xCF, 0xAE, 0x3D, 0xFC, 0x5D, 0x81, 0x87,
			},
			valid: true,
		},
		/* Test vector 6: R.y is not a quadratic residue */
		{
			pubKey: []byte{
				0x02,
				0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
				0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
				0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
				0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59,
			},
			hash: []byte{
				0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
				0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
				0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
				0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89,
			},
			sig: []byte{
				0x2A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
				0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
				0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
				0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
				0xFA, 0x16, 0xAE, 0xE0, 0x66, 0x09, 0x28, 0x0A,
				0x19, 0xB6, 0x7A, 0x24, 0xE1, 0x97, 0x7E, 0x46,
				0x97, 0x71, 0x2B, 0x5F, 0xD2, 0x94, 0x39, 0x14,
				0xEC, 0xD5, 0xF7, 0x30, 0x90, 0x1B, 0x4A, 0xB7,
			},
			valid: false,
		},
		/* Test vector 7: Negated message hash, R.x mismatch */
		{
			pubKey: []byte{
				0x03,
				0xFA, 0xC2, 0x11, 0x4C, 0x2F, 0xBB, 0x09, 0x15,
				0x27, 0xEB, 0x7C, 0x64, 0xEC, 0xB1, 0x1F, 0x80,
				0x21, 0xCB, 0x45, 0xE8, 0xE7, 0x80, 0x9D, 0x3C,
				0x09, 0x38, 0xE4, 0xB8, 0xC0, 0xE5, 0xF8, 0x4B,
			},
			hash: []byte{
				0x5E, 0x2D, 0x58, 0xD8, 0xB3, 0xBC, 0xDF, 0x1A,
				0xBA, 0xDE, 0xC7, 0x82, 0x90, 0x54, 0xF9, 0x0D,
				0xDA, 0x98, 0x05, 0xAA, 0xB5, 0x6C, 0x77, 0x33,
				0x30, 0x24, 0xB9, 0xD0, 0xA5, 0x08, 0xB7, 0x5C,
			},
			sig: []byte{
				0x00, 0xDA, 0x9B, 0x08, 0x17, 0x2A, 0x9B, 0x6F,
				0x04, 0x66, 0xA2, 0xDE, 0xFD, 0x81, 0x7F, 0x2D,
				0x7A, 0xB4, 0x37, 0xE0, 0xD2, 0x53, 0xCB, 0x53,
				0x95, 0xA9, 0x63, 0x86, 0x6B, 0x35, 0x74, 0xBE,
				0xD0, 0x92, 0xF9, 0xD8, 0x60, 0xF1, 0x77, 0x6A,
				0x1F, 0x74, 0x12, 0xAD, 0x8A, 0x1E, 0xB5, 0x0D,
				0xAC, 0xCC, 0x22, 0x2B, 0xC8, 0xC0, 0xE2, 0x6B,
				0x20, 0x56, 0xDF, 0x2F, 0x27, 0x3E, 0xFD, 0xEC,
			},
			valid: false,
		},

		{
			/* Test vector 8: Negated s, R.x mismatch */
			pubKey: []byte{
				0x02,
				0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC,
				0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B, 0x07,
				0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9,
				0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17, 0x98,
			},
			hash: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			sig: []byte{
				0x78, 0x7A, 0x84, 0x8E, 0x71, 0x04, 0x3D, 0x28,
				0x0C, 0x50, 0x47, 0x0E, 0x8E, 0x15, 0x32, 0xB2,
				0xDD, 0x5D, 0x20, 0xEE, 0x91, 0x2A, 0x45, 0xDB,
				0xDD, 0x2B, 0xD1, 0xDF, 0xBF, 0x18, 0x7E, 0xF6,
				0x8F, 0xCE, 0x56, 0x77, 0xCE, 0x7A, 0x62, 0x3C,
				0xB2, 0x00, 0x11, 0x22, 0x57, 0x97, 0xCE, 0x7A,
				0x8D, 0xE1, 0xDC, 0x6C, 0xCD, 0x4F, 0x75, 0x4A,
				0x47, 0xDA, 0x6C, 0x60, 0x0E, 0x59, 0x54, 0x3C,
			},
			valid: false,
		},
		{
			/* Test vector 9: Negated P, R.x mismatch */
			pubKey: []byte{
				0x03,
				0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
				0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
				0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
				0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59,
			},
			hash: []byte{
				0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
				0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
				0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
				0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89,
			},
			sig: []byte{
				0x2A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
				0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
				0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
				0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
				0x1E, 0x51, 0xA2, 0x2C, 0xCE, 0xC3, 0x55, 0x99,
				0xB8, 0xF2, 0x66, 0x91, 0x22, 0x81, 0xF8, 0x36,
				0x5F, 0xFC, 0x2D, 0x03, 0x5A, 0x23, 0x04, 0x34,
				0xA1, 0xA6, 0x4D, 0xC5, 0x9F, 0x70, 0x13, 0xFD,
			},
			valid: false,
		},
		{
			/* Test vector 10: s * G = e * P, R = 0 */
			pubKey: []byte{
				0x02,
				0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
				0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
				0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
				0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59,
			},
			hash: []byte{
				0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
				0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
				0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
				0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89,
			},
			sig: []byte{
				0x2A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
				0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
				0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
				0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
				0x8C, 0x34, 0x28, 0x86, 0x9A, 0x66, 0x3E, 0xD1,
				0xE9, 0x54, 0x70, 0x5B, 0x02, 0x0C, 0xBB, 0x3E,
				0x7B, 0xB6, 0xAC, 0x31, 0x96, 0x5B, 0x9E, 0xA4,
				0xC7, 0x3E, 0x22, 0x7B, 0x17, 0xC5, 0xAF, 0x5A,
			},
			valid: false,
		},
		{
			/* Test vector 11: R.x not on the curve, R.x mismatch */
			pubKey: []byte{
				0x02,
				0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
				0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
				0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
				0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59,
			},
			hash: []byte{
				0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
				0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
				0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
				0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89,
			},
			sig: []byte{
				0x4A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
				0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
				0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
				0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
				0x1E, 0x51, 0xA2, 0x2C, 0xCE, 0xC3, 0x55, 0x99,
				0xB8, 0xF2, 0x66, 0x91, 0x22, 0x81, 0xF8, 0x36,
				0x5F, 0xFC, 0x2D, 0x03, 0x5A, 0x23, 0x04, 0x34,
				0xA1, 0xA6, 0x4D, 0xC5, 0x9F, 0x70, 0x13, 0xFD,
			},
			valid: false,
		},
		{
			/* Test vector 12: r = p */
			pubKey: []byte{
				0x02,
				0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
				0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
				0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
				0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59,
			},
			hash: []byte{
				0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
				0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
				0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
				0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89,
			},
			sig: []byte{
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x2F,
				0x1E, 0x51, 0xA2, 0x2C, 0xCE, 0xC3, 0x55, 0x99,
				0xB8, 0xF2, 0x66, 0x91, 0x22, 0x81, 0xF8, 0x36,
				0x5F, 0xFC, 0x2D, 0x03, 0x5A, 0x23, 0x04, 0x34,
				0xA1, 0xA6, 0x4D, 0xC5, 0x9F, 0x70, 0x13, 0xFD,
			},
			valid: false,
		},
		{
			/* Test vector 13: s = n */
			pubKey: []byte{
				0x02,
				0xDF, 0xF1, 0xD7, 0x7F, 0x2A, 0x67, 0x1C, 0x5F,
				0x36, 0x18, 0x37, 0x26, 0xDB, 0x23, 0x41, 0xBE,
				0x58, 0xFE, 0xAE, 0x1D, 0xA2, 0xDE, 0xCE, 0xD8,
				0x43, 0x24, 0x0F, 0x7B, 0x50, 0x2B, 0xA6, 0x59,
			},
			hash: []byte{
				0x24, 0x3F, 0x6A, 0x88, 0x85, 0xA3, 0x08, 0xD3,
				0x13, 0x19, 0x8A, 0x2E, 0x03, 0x70, 0x73, 0x44,
				0xA4, 0x09, 0x38, 0x22, 0x29, 0x9F, 0x31, 0xD0,
				0x08, 0x2E, 0xFA, 0x98, 0xEC, 0x4E, 0x6C, 0x89,
			},
			sig: []byte{
				0x2A, 0x29, 0x8D, 0xAC, 0xAE, 0x57, 0x39, 0x5A,
				0x15, 0xD0, 0x79, 0x5D, 0xDB, 0xFD, 0x1D, 0xCB,
				0x56, 0x4D, 0xA8, 0x2B, 0x0F, 0x26, 0x9B, 0xC7,
				0x0A, 0x74, 0xF8, 0x22, 0x04, 0x29, 0xBA, 0x1D,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE,
				0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B,
				0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36, 0x41, 0x41,
			},
			valid: false,
		},
	}

	for i, tt := range tests {
		pubKey, err := secp256k1.ParsePubKey(tt.pubKey)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
			continue
		}

		sig, err := schnorr.ParseSignature(tt.sig)
		if err != nil {
			if tt.valid {
				t.Errorf("failed on %d: %v", i, err)
			}
			continue
		}

		valid := SchnorrVerifyBCH(sig, pubKey, tt.hash)
		if valid != tt.valid {
			t.Errorf("failed on %d: have %t, want %t", i, valid, tt.valid)
		}
	}
}

func TestSchnorrEndToEndBCH(t *testing.T) {
	const iterations = 32

	for i := 0; i < iterations; i++ {
		rawPriv, err := ecdsa.GenerateKey(secp256k1.S256(), rand.Reader)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
			continue
		}

		msg := make([]byte, 128)
		_, err = rand.Read(msg)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
			continue
		}

		privKey := secp256k1.PrivKeyFromBytes(rawPriv.D.Bytes())
		hash := Sha256(msg)

		sig := SchnorrSignBCH(privKey, hash)
		if !SchnorrVerifyBCH(sig, privKey.PubKey(), hash) {
			t.Errorf("failed on %d: have false, want true", i)
		}
	}
}
