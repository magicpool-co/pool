package btctx

import (
	"bytes"
	"encoding/hex"
	"math/big"
	"testing"

	secp256k1 "github.com/decred/dcrd/dcrec/secp256k1/v4"

	"github.com/magicpool-co/pool/types"
)

var (
	baseTxBTC = &transaction{
		PrefixP2PKH:   []byte{0x00},
		PrefixP2SH:    []byte{0x05},
		SegwitEnabled: true,
		Version:       0x1,
	}

	baseTxRVN = &transaction{
		PrefixP2PKH: []byte{0x3c},
		PrefixP2SH:  []byte{0x7a},
		Version:     0x1,
	}
)

func TestGenerateTx(t *testing.T) {
	tests := []struct {
		priv       string
		baseTx     *transaction
		inputs     []*types.TxInput
		outputs    []*types.TxOutput
		feePerByte uint64
		tx         []byte
		txid       string
	}{
		// BTC tests
		{
			priv:       "613cd5bb4e5083635609558f89fff1b662edd12f0732ab140b7ee9f688730800",
			baseTx:     baseTxBTC,
			feePerByte: 2,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "c4b49115b9fb400110536cf54ba93b343568b11ad18e10386e6f91f831ac4cdd",
					Index: 0,
					Value: new(big.Int).SetUint64(19678),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "bc1qpt2w7fmpvkfkez3qmp28znesrl5jxakzehuk6g",
					Value:    new(big.Int).SetUint64(5462),
					SplitFee: false,
				},
				&types.TxOutput{
					Address:  "1KyPUP5DhkcRhhSmk6KuPXZXGi6iuSTZd8",
					Value:    new(big.Int).SetUint64(14216),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x01, 0xdd, 0x4c, 0xac, 0x31, 0xf8, 0x91, 0x6f, 0x6e, 0x38, 0x10, 0x8e,
				0xd1, 0x1a, 0xb1, 0x68, 0x35, 0x34, 0x3b, 0xa9, 0x4b, 0xf5, 0x6c, 0x53, 0x10, 0x01, 0x40, 0xfb,
				0xb9, 0x15, 0x91, 0xb4, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00,
				0x8e, 0x6c, 0x0c, 0xad, 0xc9, 0x9b, 0xa9, 0x91, 0x29, 0xae, 0x3a, 0x97, 0x56, 0x73, 0x60, 0x4d,
				0x05, 0x83, 0xd9, 0xb2, 0x0c, 0x40, 0xc1, 0xec, 0x69, 0x26, 0x11, 0xd4, 0x0a, 0x67, 0x68, 0x10,
				0x02, 0x20, 0x58, 0xcd, 0xb3, 0xbe, 0xbd, 0xe8, 0x7c, 0xfa, 0x7a, 0xc8, 0xa5, 0x6d, 0x55, 0x6b,
				0xcc, 0xad, 0x67, 0xf0, 0xfc, 0x32, 0xca, 0x84, 0x04, 0x05, 0xe6, 0x8d, 0xe0, 0x34, 0x9d, 0xdf,
				0x8e, 0x25, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab, 0xe7, 0x76,
				0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee, 0xbe, 0x12,
				0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda, 0xd4, 0x26,
				0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26, 0xf6, 0x7c,
				0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x02, 0x56, 0x15, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x16, 0x00, 0x14, 0x0a, 0xd4, 0xef, 0x27, 0x61, 0x65, 0x93, 0x6c, 0x8a, 0x20, 0xd8,
				0x54, 0x71, 0x4f, 0x30, 0x1f, 0xe9, 0x23, 0x76, 0xc2, 0x8a, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x19, 0x76, 0xa9, 0x14, 0xd0, 0x1c, 0x51, 0x14, 0x38, 0xc6, 0x60, 0x81, 0xb6, 0x49, 0xc6,
				0x0c, 0xc3, 0xa2, 0xcf, 0x72, 0xbf, 0xfd, 0x53, 0x24, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00,
			},
			txid: "9969c519092a8d97907e6aed1b532e40b3bf12d955a7735c97347f050d1755ab",
		},
		{
			priv:       "613cd5bb4e5083635609558f89fff1b662edd12f0732ab140b7ee9f688730800",
			baseTx:     baseTxBTC,
			feePerByte: 2,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "9969c519092a8d97907e6aed1b532e40b3bf12d955a7735c97347f050d1755ab",
					Index: 1,
					Value: new(big.Int).SetUint64(13706),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "1KyPUP5DhkcRhhSmk6KuPXZXGi6iuSTZd8",
					Value:    new(big.Int).SetUint64(4568),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "1KyPUP5DhkcRhhSmk6KuPXZXGi6iuSTZd8",
					Value:    new(big.Int).SetUint64(4568),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "1KyPUP5DhkcRhhSmk6KuPXZXGi6iuSTZd8",
					Value:    new(big.Int).SetUint64(4570),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x01, 0xab, 0x55, 0x17, 0x0d, 0x05, 0x7f, 0x34, 0x97, 0x5c, 0x73, 0xa7,
				0x55, 0xd9, 0x12, 0xbf, 0xb3, 0x40, 0x2e, 0x53, 0x1b, 0xed, 0x6a, 0x7e, 0x90, 0x97, 0x8d, 0x2a,
				0x09, 0x19, 0xc5, 0x69, 0x99, 0x01, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x7b,
				0x24, 0x84, 0x4a, 0x3c, 0x84, 0x0c, 0xb8, 0x14, 0x5c, 0x09, 0x3c, 0xad, 0x6d, 0x8b, 0xef, 0x25,
				0x40, 0xb3, 0x9a, 0x8f, 0xc7, 0x9a, 0xae, 0x0d, 0x3e, 0xdf, 0x03, 0xff, 0xd4, 0xe7, 0xc6, 0x02,
				0x20, 0x11, 0xd9, 0x21, 0x4b, 0xbf, 0xf6, 0x7e, 0xb8, 0x89, 0x10, 0x70, 0x20, 0x1f, 0x24, 0x02,
				0x97, 0x16, 0x90, 0xba, 0xb6, 0x31, 0x6e, 0x4e, 0x2c, 0xb5, 0x0a, 0x4c, 0x74, 0xaf, 0xf6, 0xb4,
				0x5e, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab, 0xe7, 0x76, 0x8e,
				0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee, 0xbe, 0x12, 0xec,
				0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda, 0xd4, 0x26, 0xb6,
				0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26, 0xf6, 0x7c, 0xcd,
				0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x03, 0x14, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x19, 0x76, 0xa9, 0x14, 0xd0, 0x1c, 0x51, 0x14, 0x38, 0xc6, 0x60, 0x81, 0xb6, 0x49, 0xc6,
				0x0c, 0xc3, 0xa2, 0xcf, 0x72, 0xbf, 0xfd, 0x53, 0x24, 0x88, 0xac, 0x16, 0x11, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xd0, 0x1c, 0x51, 0x14, 0x38, 0xc6, 0x60, 0x81, 0xb6,
				0x49, 0xc6, 0x0c, 0xc3, 0xa2, 0xcf, 0x72, 0xbf, 0xfd, 0x53, 0x24, 0x88, 0xac, 0x18, 0x11, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xd0, 0x1c, 0x51, 0x14, 0x38, 0xc6, 0x60,
				0x81, 0xb6, 0x49, 0xc6, 0x0c, 0xc3, 0xa2, 0xcf, 0x72, 0xbf, 0xfd, 0x53, 0x24, 0x88, 0xac, 0x00,
				0x00, 0x00, 0x00,
			},
			txid: "5d28aab6847a8dc8f5d80f95521ff9a3b7a2ea0c113f09d31c5c2ef4678eb3ae",
		},
		{
			priv:       "613cd5bb4e5083635609558f89fff1b662edd12f0732ab140b7ee9f688730800",
			baseTx:     baseTxBTC,
			feePerByte: 3,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "04d45c8d598100820e3e9ba25d7e1468344b9ed40b9f20861f7b1a0a3d21b8e0",
					Index: 0,
					Value: new(big.Int).SetUint64(4372),
				},
				&types.TxInput{
					Hash:  "04d45c8d598100820e3e9ba25d7e1468344b9ed40b9f20861f7b1a0a3d21b8e0",
					Index: 1,
					Value: new(big.Int).SetUint64(4372),
				},
				&types.TxInput{
					Hash:  "04d45c8d598100820e3e9ba25d7e1468344b9ed40b9f20861f7b1a0a3d21b8e0",
					Index: 2,
					Value: new(big.Int).SetUint64(4374),
				},
				&types.TxInput{
					Hash:  "604dd91a9dab290e14fa4f2b0077e577030cf51332ed7dd1b0719c34d0ff23fd",
					Index: 0,
					Value: new(big.Int).SetUint64(5202),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "1KyPUP5DhkcRhhSmk6KuPXZXGi6iuSTZd8",
					Value:    new(big.Int).SetUint64(18320),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x04, 0xe0, 0xb8, 0x21, 0x3d, 0x0a, 0x1a, 0x7b, 0x1f, 0x86, 0x20, 0x9f,
				0x0b, 0xd4, 0x9e, 0x4b, 0x34, 0x68, 0x14, 0x7e, 0x5d, 0xa2, 0x9b, 0x3e, 0x0e, 0x82, 0x00, 0x81,
				0x59, 0x8d, 0x5c, 0xd4, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x51,
				0x56, 0xfd, 0xb7, 0x27, 0xac, 0xd5, 0x9c, 0xa1, 0x01, 0xfc, 0x97, 0xae, 0x77, 0xcb, 0xaa, 0xae,
				0x98, 0xcd, 0xf2, 0x7c, 0x7d, 0xab, 0x0e, 0x68, 0x1c, 0xfb, 0x18, 0x53, 0xa3, 0x87, 0x2e, 0x02,
				0x20, 0x66, 0x08, 0xb3, 0xfe, 0xb0, 0x20, 0x77, 0x4f, 0x1b, 0x0f, 0xbf, 0xec, 0x3b, 0xfb, 0x1c,
				0x9f, 0x8c, 0xfe, 0x32, 0xe6, 0x5b, 0x00, 0xcd, 0x7a, 0x5f, 0x0e, 0x88, 0x83, 0x13, 0x78, 0xb1,
				0x65, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab, 0xe7, 0x76, 0x8e,
				0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee, 0xbe, 0x12, 0xec,
				0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda, 0xd4, 0x26, 0xb6,
				0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26, 0xf6, 0x7c, 0xcd,
				0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xb8, 0x21, 0x3d, 0x0a, 0x1a, 0x7b, 0x1f,
				0x86, 0x20, 0x9f, 0x0b, 0xd4, 0x9e, 0x4b, 0x34, 0x68, 0x14, 0x7e, 0x5d, 0xa2, 0x9b, 0x3e, 0x0e,
				0x82, 0x00, 0x81, 0x59, 0x8d, 0x5c, 0xd4, 0x04, 0x01, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44,
				0x02, 0x20, 0x1c, 0xe0, 0xc7, 0xfe, 0x5b, 0x99, 0xc6, 0xd4, 0xd5, 0x39, 0x2f, 0x6c, 0xf4, 0x72,
				0xba, 0xca, 0x7f, 0xc4, 0xd2, 0x74, 0x68, 0x3a, 0xc1, 0x65, 0xac, 0x03, 0x09, 0x4c, 0xf6, 0x8c,
				0x15, 0xe5, 0x02, 0x20, 0x27, 0x31, 0x05, 0x90, 0x68, 0xc8, 0xc0, 0x56, 0x34, 0x8c, 0x25, 0x0c,
				0xcf, 0xde, 0xc9, 0xbb, 0xca, 0x83, 0xad, 0xaa, 0x38, 0x24, 0x94, 0x83, 0x60, 0x95, 0xc5, 0xdd,
				0xd8, 0x84, 0x93, 0x77, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab,
				0xe7, 0x76, 0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee,
				0xbe, 0x12, 0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda,
				0xd4, 0x26, 0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26,
				0xf6, 0x7c, 0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xb8, 0x21, 0x3d, 0x0a,
				0x1a, 0x7b, 0x1f, 0x86, 0x20, 0x9f, 0x0b, 0xd4, 0x9e, 0x4b, 0x34, 0x68, 0x14, 0x7e, 0x5d, 0xa2,
				0x9b, 0x3e, 0x0e, 0x82, 0x00, 0x81, 0x59, 0x8d, 0x5c, 0xd4, 0x04, 0x02, 0x00, 0x00, 0x00, 0x8a,
				0x47, 0x30, 0x44, 0x02, 0x20, 0x51, 0xaf, 0xc9, 0xed, 0xe7, 0x5c, 0x9f, 0x41, 0xda, 0x63, 0x1d,
				0x6b, 0xdc, 0x13, 0xd9, 0x4b, 0x4b, 0x24, 0xcc, 0xb2, 0x51, 0x25, 0xf9, 0x6b, 0x20, 0x88, 0x4f,
				0xba, 0xce, 0xfc, 0xca, 0xc1, 0x02, 0x20, 0x16, 0xb4, 0x23, 0x23, 0xc4, 0x8e, 0x27, 0x1f, 0x01,
				0xd2, 0x74, 0xe5, 0x46, 0xf5, 0xe4, 0x69, 0x0d, 0x3d, 0x51, 0xec, 0xcc, 0xa1, 0xdf, 0x8b, 0xd0,
				0xf2, 0xd3, 0xb8, 0x93, 0x9b, 0x26, 0x79, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90,
				0x39, 0xe3, 0xab, 0xe7, 0x76, 0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79,
				0xd3, 0xc8, 0xee, 0xbe, 0x12, 0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7,
				0xeb, 0xe9, 0xda, 0xd4, 0x26, 0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04,
				0x0c, 0xa5, 0x26, 0xf6, 0x7c, 0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x23,
				0xff, 0xd0, 0x34, 0x9c, 0x71, 0xb0, 0xd1, 0x7d, 0xed, 0x32, 0x13, 0xf5, 0x0c, 0x03, 0x77, 0xe5,
				0x77, 0x00, 0x2b, 0x4f, 0xfa, 0x14, 0x0e, 0x29, 0xab, 0x9d, 0x1a, 0xd9, 0x4d, 0x60, 0x00, 0x00,
				0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x2e, 0x22, 0x43, 0xee, 0x8e, 0xab, 0x2d, 0x58,
				0xe6, 0x05, 0xe8, 0x40, 0x90, 0x27, 0x4e, 0x34, 0x82, 0x0d, 0x39, 0x31, 0xff, 0xb9, 0x8c, 0x29,
				0x9c, 0x29, 0x64, 0x62, 0x26, 0x16, 0xe1, 0x7c, 0x02, 0x20, 0x7f, 0xb2, 0xc5, 0xbf, 0xe7, 0x09,
				0x16, 0xef, 0xe5, 0xd1, 0xbd, 0xe5, 0x11, 0x4a, 0xe8, 0x0f, 0xe0, 0x94, 0xf0, 0x8f, 0xd3, 0x9b,
				0xfe, 0x06, 0x6c, 0x2b, 0x52, 0x21, 0x2a, 0xce, 0x3b, 0x6c, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80,
				0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab, 0xe7, 0x76, 0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50,
				0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee, 0xbe, 0x12, 0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b,
				0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda, 0xd4, 0x26, 0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a,
				0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26, 0xf6, 0x7c, 0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff,
				0xff, 0x01, 0xa2, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xd0, 0x1c,
				0x51, 0x14, 0x38, 0xc6, 0x60, 0x81, 0xb6, 0x49, 0xc6, 0x0c, 0xc3, 0xa2, 0xcf, 0x72, 0xbf, 0xfd,
				0x53, 0x24, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00,
			},
			txid: "514b355b1232c255850aec12293db70b2a246ab66fcbba6769d41735682e578d",
		},
		{
			priv:       "613cd5bb4e5083635609558f89fff1b662edd12f0732ab140b7ee9f688730800",
			baseTx:     baseTxBTC,
			feePerByte: 2,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "514b355b1232c255850aec12293db70b2a246ab66fcbba6769d41735682e578d",
					Index: 0,
					Value: new(big.Int).SetUint64(16034),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "3GjVtv7xt1HoYUnpHBhqwZLMQTn9SPSNyo",
					Value:    new(big.Int).SetUint64(16034),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x01, 0x8d, 0x57, 0x2e, 0x68, 0x35, 0x17, 0xd4, 0x69, 0x67, 0xba, 0xcb,
				0x6f, 0xb6, 0x6a, 0x24, 0x2a, 0x0b, 0xb7, 0x3d, 0x29, 0x12, 0xec, 0x0a, 0x85, 0x55, 0xc2, 0x32,
				0x12, 0x5b, 0x35, 0x4b, 0x51, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00,
				0xa4, 0xaa, 0x59, 0x93, 0x4c, 0x9d, 0x62, 0x4e, 0x5d, 0x1a, 0xdc, 0xa7, 0xa0, 0x5d, 0x7d, 0x6e,
				0x49, 0x78, 0x68, 0xcf, 0x88, 0x07, 0xec, 0xfd, 0xb0, 0xca, 0x19, 0xf3, 0x3d, 0xff, 0xce, 0xeb,
				0x02, 0x20, 0x7a, 0x26, 0xf0, 0x00, 0x9c, 0x9a, 0xec, 0x1b, 0xf6, 0x6b, 0x72, 0x56, 0xdd, 0x96,
				0x24, 0xa3, 0x75, 0xd0, 0x08, 0xa8, 0x7e, 0x67, 0x8b, 0x1f, 0x3a, 0x7e, 0x01, 0xce, 0x08, 0x17,
				0x8b, 0x1b, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab, 0xe7, 0x76,
				0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee, 0xbe, 0x12,
				0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda, 0xd4, 0x26,
				0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26, 0xf6, 0x7c,
				0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x01, 0xe6, 0x3c, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x17, 0xa9, 0x14, 0xa5, 0x02, 0x11, 0x88, 0x47, 0x8c, 0x0f, 0x7e, 0xd8, 0xa1, 0x41,
				0x33, 0xd5, 0x47, 0x7a, 0xd7, 0x5d, 0x94, 0x56, 0xd9, 0x87, 0x00, 0x00, 0x00, 0x00,
			},
			txid: "0e0111e16fdeabce53439ad30c69cffe6f850140f61f37f932cf18427e5dac81",
		},
		{
			priv:       "613cd5bb4e5083635609558f89fff1b662edd12f0732ab140b7ee9f688730800",
			baseTx:     baseTxBTC,
			feePerByte: 2,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "be2469e8de00e9fb44670e60a17b14d1f0569bf601547d83add7c7875652d325",
					Index: 0,
					Value: new(big.Int).SetUint64(7894),
				},
				&types.TxInput{
					Hash:  "1ca968cab35b1e6561410229377a234b32eb6cf374cdd467371106f86c9ce132",
					Index: 0,
					Value: new(big.Int).SetUint64(7013),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "1KyPUP5DhkcRhhSmk6KuPXZXGi6iuSTZd8",
					Value:    new(big.Int).SetUint64(14907),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x02, 0x25, 0xd3, 0x52, 0x56, 0x87, 0xc7, 0xd7, 0xad, 0x83, 0x7d, 0x54,
				0x01, 0xf6, 0x9b, 0x56, 0xf0, 0xd1, 0x14, 0x7b, 0xa1, 0x60, 0x0e, 0x67, 0x44, 0xfb, 0xe9, 0x00,
				0xde, 0xe8, 0x69, 0x24, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x7b,
				0xa3, 0x60, 0x59, 0x9b, 0x78, 0x68, 0x1e, 0xd1, 0x7c, 0x16, 0x90, 0x84, 0x17, 0x5f, 0xf3, 0xbd,
				0xca, 0xf8, 0x8e, 0xd6, 0x1a, 0xfe, 0x4c, 0x05, 0x70, 0x87, 0x9a, 0x01, 0x93, 0x8f, 0x5a, 0x02,
				0x20, 0x3e, 0x71, 0x10, 0x40, 0x4e, 0xb2, 0x20, 0x7d, 0x2a, 0xe8, 0x30, 0x8d, 0xcf, 0xfb, 0xec,
				0xff, 0xfa, 0x89, 0xb8, 0x2c, 0xd2, 0xc1, 0xe0, 0x5e, 0x12, 0xf3, 0x5d, 0x9c, 0x09, 0x3b, 0x2f,
				0xcf, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab, 0xe7, 0x76, 0x8e,
				0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee, 0xbe, 0x12, 0xec,
				0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda, 0xd4, 0x26, 0xb6,
				0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26, 0xf6, 0x7c, 0xcd,
				0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x32, 0xe1, 0x9c, 0x6c, 0xf8, 0x06, 0x11, 0x37,
				0x67, 0xd4, 0xcd, 0x74, 0xf3, 0x6c, 0xeb, 0x32, 0x4b, 0x23, 0x7a, 0x37, 0x29, 0x02, 0x41, 0x61,
				0x65, 0x1e, 0x5b, 0xb3, 0xca, 0x68, 0xa9, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44,
				0x02, 0x20, 0x08, 0xb4, 0xa5, 0x0d, 0xc5, 0xaa, 0x7e, 0x5c, 0xd6, 0x9d, 0xa7, 0xd4, 0xc0, 0x9a,
				0x92, 0x3e, 0xbc, 0x9b, 0x96, 0xea, 0xe9, 0x73, 0xc1, 0x10, 0x41, 0x3a, 0xbe, 0x38, 0x34, 0xf1,
				0x5d, 0x00, 0x02, 0x20, 0x62, 0xcf, 0x27, 0x06, 0x57, 0x5b, 0x22, 0x89, 0x3f, 0x1e, 0x9b, 0xef,
				0x90, 0x7c, 0x25, 0x02, 0x83, 0x4d, 0x24, 0x65, 0x34, 0xb3, 0xc5, 0x80, 0x3c, 0x05, 0x9f, 0x52,
				0x61, 0x4e, 0xff, 0xde, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab,
				0xe7, 0x76, 0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee,
				0xbe, 0x12, 0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda,
				0xd4, 0x26, 0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26,
				0xf6, 0x7c, 0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x01, 0x15, 0x37, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xd0, 0x1c, 0x51, 0x14, 0x38, 0xc6, 0x60, 0x81,
				0xb6, 0x49, 0xc6, 0x0c, 0xc3, 0xa2, 0xcf, 0x72, 0xbf, 0xfd, 0x53, 0x24, 0x88, 0xac, 0x00, 0x00,
				0x00, 0x00,
			},
			txid: "806c612c22de1d8fe1cbdf2a29427385817be95cba8e440cdfd5b9c1bc4f10b6",
		},
		{
			priv:       "613cd5bb4e5083635609558f89fff1b662edd12f0732ab140b7ee9f688730800",
			baseTx:     baseTxBTC,
			feePerByte: 2,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "be2469e8de00e9fb44670e60a17b14d1f0569bf601547d83add7c7875652d325",
					Index: 0,
					Value: new(big.Int).SetUint64(7894),
				},
				&types.TxInput{
					Hash:  "1ca968cab35b1e6561410229377a234b32eb6cf374cdd467371106f86c9ce132",
					Index: 0,
					Value: new(big.Int).SetUint64(7013),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "bc1p6ya9xucqf2xukt007dsfs8rfeyenzgsd5m2hxnwghnzk3jqp4mwsa7duds",
					Value:    new(big.Int).SetUint64(14907),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x02, 0x25, 0xd3, 0x52, 0x56, 0x87, 0xc7, 0xd7, 0xad, 0x83, 0x7d, 0x54,
				0x01, 0xf6, 0x9b, 0x56, 0xf0, 0xd1, 0x14, 0x7b, 0xa1, 0x60, 0x0e, 0x67, 0x44, 0xfb, 0xe9, 0x00,
				0xde, 0xe8, 0x69, 0x24, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00,
				0xb0, 0xc1, 0xfe, 0x05, 0x88, 0x7a, 0x7e, 0xce, 0xb9, 0x0c, 0x76, 0x6d, 0x56, 0xf1, 0xd2, 0x62,
				0x1c, 0xcc, 0x17, 0xb7, 0xdf, 0x36, 0x36, 0x3b, 0xba, 0xa0, 0x25, 0x01, 0xa8, 0x22, 0xa1, 0x62,
				0x02, 0x20, 0x36, 0x28, 0x3c, 0x4c, 0xd5, 0xf5, 0x67, 0x64, 0xd0, 0x06, 0xc7, 0xee, 0xcf, 0x1a,
				0x20, 0x9d, 0x37, 0xd3, 0x81, 0x57, 0x51, 0xab, 0xfb, 0xb9, 0x21, 0x81, 0x63, 0x7a, 0xea, 0xc4,
				0x9a, 0xb8, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3, 0xab, 0xe7, 0x76,
				0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8, 0xee, 0xbe, 0x12,
				0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9, 0xda, 0xd4, 0x26,
				0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5, 0x26, 0xf6, 0x7c,
				0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x32, 0xe1, 0x9c, 0x6c, 0xf8, 0x06, 0x11,
				0x37, 0x67, 0xd4, 0xcd, 0x74, 0xf3, 0x6c, 0xeb, 0x32, 0x4b, 0x23, 0x7a, 0x37, 0x29, 0x02, 0x41,
				0x61, 0x65, 0x1e, 0x5b, 0xb3, 0xca, 0x68, 0xa9, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30,
				0x44, 0x02, 0x20, 0x23, 0x10, 0xcd, 0x78, 0x66, 0xe8, 0x8c, 0xc9, 0x3d, 0x62, 0x11, 0x2a, 0x96,
				0xe8, 0xcf, 0x52, 0xf3, 0xb3, 0xf2, 0xaf, 0xd4, 0xe9, 0xbd, 0xb5, 0xf4, 0x5c, 0x07, 0xf7, 0xd5,
				0x95, 0x14, 0x90, 0x02, 0x20, 0x58, 0xcb, 0xcf, 0xd6, 0xf7, 0xaa, 0x9a, 0xf4, 0xe7, 0x24, 0x69,
				0x16, 0x7c, 0x03, 0x26, 0xad, 0xbf, 0xcb, 0xaf, 0xff, 0xf4, 0x74, 0x2e, 0xc2, 0x47, 0xc7, 0x31,
				0x68, 0x82, 0x15, 0xa8, 0x65, 0x01, 0x41, 0x04, 0x19, 0xc9, 0x80, 0x63, 0x1d, 0x90, 0x39, 0xe3,
				0xab, 0xe7, 0x76, 0x8e, 0xc9, 0x6e, 0x91, 0xc9, 0x7c, 0xb8, 0x50, 0x73, 0xc5, 0x79, 0xd3, 0xc8,
				0xee, 0xbe, 0x12, 0xec, 0x86, 0xf4, 0x2f, 0xbf, 0x08, 0xbe, 0x7b, 0xd5, 0x4f, 0xa7, 0xeb, 0xe9,
				0xda, 0xd4, 0x26, 0xb6, 0x77, 0x7b, 0xdb, 0x6c, 0xca, 0xa0, 0x0a, 0x69, 0xff, 0x04, 0x0c, 0xa5,
				0x26, 0xf6, 0x7c, 0xcd, 0xd2, 0xbf, 0x40, 0xd3, 0xff, 0xff, 0xff, 0xff, 0x01, 0x03, 0x37, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x51, 0x20, 0xd1, 0x3a, 0x53, 0x73, 0x00, 0x4a, 0x8d, 0xcb,
				0x2d, 0xef, 0xf3, 0x60, 0x98, 0x1c, 0x69, 0xc9, 0x33, 0x31, 0x22, 0x0d, 0xa6, 0xd5, 0x73, 0x4d,
				0xc8, 0xbc, 0xc5, 0x68, 0xc8, 0x01, 0xae, 0xdd, 0x00, 0x00, 0x00, 0x00,
			},
			txid: "e5d9e9c30a29f94fc01ed9a24e1fde6e5a4934499ccccaa1c116faf89953959b",
		},
		// RVN tests
		{
			priv:       "febe195f109e31cb696540d3f51b75ad317a03610db0f46da869c8d50e8177e6",
			baseTx:     baseTxRVN,
			feePerByte: 2000,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "80142dfc60a9a0adc49efc779140bdbb1cace92e29bb555930b151552165026f",
					Index: 0,
					Value: new(big.Int).SetUint64(16525746675),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "RAHmrcPgnxCM9BvaUXwEPSCkUkJDocTCVk",
					Value:    new(big.Int).SetUint64(16525746675),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x01, 0x6f, 0x02, 0x65, 0x21, 0x55, 0x51, 0xb1, 0x30, 0x59, 0x55, 0xbb,
				0x29, 0x2e, 0xe9, 0xac, 0x1c, 0xbb, 0xbd, 0x40, 0x91, 0x77, 0xfc, 0x9e, 0xc4, 0xad, 0xa0, 0xa9,
				0x60, 0xfc, 0x2d, 0x14, 0x80, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x41,
				0x24, 0x28, 0x05, 0x89, 0x42, 0x41, 0x48, 0x46, 0x86, 0xcc, 0x20, 0xf3, 0x5e, 0x7d, 0x4e, 0xa3,
				0x7b, 0x01, 0xf8, 0x7a, 0xe6, 0x81, 0x19, 0xa5, 0x5d, 0x2b, 0xcb, 0x1d, 0x12, 0x0a, 0xbf, 0x02,
				0x20, 0x02, 0x34, 0x42, 0xbb, 0xd1, 0x9f, 0xae, 0x05, 0x3d, 0xc6, 0x81, 0x10, 0xea, 0x59, 0x0e,
				0xfa, 0xeb, 0x7c, 0xca, 0x6a, 0xea, 0x2f, 0xbf, 0xda, 0xc3, 0xcb, 0xc3, 0xfa, 0x13, 0xb2, 0xaf,
				0x11, 0x01, 0x41, 0x04, 0xfc, 0x78, 0xbc, 0x1a, 0xd5, 0xbc, 0x02, 0x09, 0x21, 0x1e, 0xc6, 0x40,
				0xd9, 0x1c, 0x1a, 0x4b, 0x11, 0x15, 0x68, 0x1e, 0x4b, 0x94, 0x7c, 0xba, 0x40, 0xd0, 0x1e, 0x95,
				0xb0, 0xa7, 0xbc, 0xd6, 0xf9, 0x89, 0x7c, 0x95, 0xd6, 0xed, 0x2e, 0xf1, 0x25, 0x03, 0xf8, 0x26,
				0x17, 0x99, 0xc1, 0x76, 0x02, 0x1f, 0x2d, 0xf2, 0xce, 0xc1, 0x1f, 0x75, 0x17, 0x91, 0x3a, 0xcd,
				0x01, 0xe8, 0xaf, 0xea, 0xff, 0xff, 0xff, 0xff, 0x01, 0xc3, 0x13, 0xfc, 0xd8, 0x03, 0x00, 0x00,
				0x00, 0x19, 0x76, 0xa9, 0x14, 0x0b, 0x14, 0x52, 0x62, 0xcc, 0xbc, 0x02, 0x10, 0x82, 0x00, 0xdb,
				0x62, 0x78, 0xd8, 0x37, 0x78, 0xb3, 0x4b, 0xdb, 0x03, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00,
			},
			txid: "dfea1ccbbedfae95964adc9139e332eddaff1c2950edcee8f0f077f58be8256f",
		},
		{
			priv:       "a3162180ace3ece4acd2d7c71750cda31d8fdbeda938521d68727a9b828468ba",
			baseTx:     baseTxRVN,
			feePerByte: 2000,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "dfea1ccbbedfae95964adc9139e332eddaff1c2950edcee8f0f077f58be8256f",
					Index: 0,
					Value: new(big.Int).SetUint64(16525300675),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "RAaKYVemxPpXLyTFbGCAk5Bm9BGBjNPcoU",
					Value:    new(big.Int).SetUint64(5508433558),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "RAaKYVemxPpXLyTFbGCAk5Bm9BGBjNPcoU",
					Value:    new(big.Int).SetUint64(5508433558),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "RAaKYVemxPpXLyTFbGCAk5Bm9BGBjNPcoU",
					Value:    new(big.Int).SetUint64(5508433559),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x01, 0x6f, 0x25, 0xe8, 0x8b, 0xf5, 0x77, 0xf0, 0xf0, 0xe8, 0xce, 0xed,
				0x50, 0x29, 0x1c, 0xff, 0xda, 0xed, 0x32, 0xe3, 0x39, 0x91, 0xdc, 0x4a, 0x96, 0x95, 0xae, 0xdf,
				0xbe, 0xcb, 0x1c, 0xea, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x06,
				0xfc, 0x8d, 0xd9, 0xb9, 0x20, 0x4e, 0x97, 0xbc, 0x2b, 0x58, 0xf4, 0xd1, 0x51, 0xb6, 0x63, 0x7c,
				0xea, 0x23, 0x4b, 0x4d, 0x6a, 0x25, 0xe1, 0xd9, 0x99, 0xee, 0x5f, 0xad, 0xa7, 0xda, 0xf3, 0x02,
				0x20, 0x1f, 0x84, 0x88, 0xb9, 0xc0, 0x3a, 0xea, 0x21, 0xb8, 0x30, 0x32, 0xd6, 0xbe, 0x1d, 0xc2,
				0x04, 0x4e, 0x10, 0xdc, 0xb1, 0x96, 0x10, 0xea, 0x79, 0xf4, 0xda, 0x23, 0x63, 0x66, 0x1f, 0x40,
				0xc4, 0x01, 0x41, 0x04, 0x72, 0x9d, 0x5f, 0x3b, 0x02, 0x7c, 0x19, 0x65, 0x31, 0x33, 0xba, 0x16,
				0xca, 0x65, 0x28, 0xb3, 0x6b, 0xcf, 0x92, 0x63, 0xc8, 0x0c, 0xa8, 0x58, 0x6b, 0xbd, 0xcd, 0x32,
				0xab, 0x7d, 0xec, 0x4d, 0x78, 0x19, 0x10, 0x7d, 0x98, 0x6c, 0xdc, 0x79, 0xf1, 0x57, 0x59, 0x25,
				0xc9, 0xfc, 0x01, 0x67, 0x7f, 0xcd, 0x99, 0xb8, 0x45, 0x5f, 0xfb, 0x33, 0x8c, 0xc9, 0x9a, 0x63,
				0xfe, 0x78, 0x5a, 0x46, 0xff, 0xff, 0xff, 0xff, 0x03, 0xc5, 0x10, 0x51, 0x48, 0x01, 0x00, 0x00,
				0x00, 0x19, 0x76, 0xa9, 0x14, 0x0e, 0x35, 0x6d, 0xc1, 0x21, 0xa7, 0x4b, 0xb5, 0x42, 0xab, 0x36,
				0xcf, 0x27, 0x36, 0x72, 0xe6, 0x2b, 0x9b, 0xa8, 0xb5, 0x88, 0xac, 0xc7, 0x10, 0x51, 0x48, 0x01,
				0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x0e, 0x35, 0x6d, 0xc1, 0x21, 0xa7, 0x4b, 0xb5, 0x42,
				0xab, 0x36, 0xcf, 0x27, 0x36, 0x72, 0xe6, 0x2b, 0x9b, 0xa8, 0xb5, 0x88, 0xac, 0xc7, 0x10, 0x51,
				0x48, 0x01, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x0e, 0x35, 0x6d, 0xc1, 0x21, 0xa7, 0x4b,
				0xb5, 0x42, 0xab, 0x36, 0xcf, 0x27, 0x36, 0x72, 0xe6, 0x2b, 0x9b, 0xa8, 0xb5, 0x88, 0xac, 0x00,
				0x00, 0x00, 0x00,
			},
			txid: "3ca835a8d92cd1bb173996bbd35f13d67717dba3ed5d3c382be4b681d6354bc2",
		},
		{
			priv:       "febe195f109e31cb696540d3f51b75ad317a03610db0f46da869c8d50e8177e6",
			baseTx:     baseTxRVN,
			feePerByte: 2000,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "d527377e1589736bacbba29386d00445484ec15ba8c24faabb16acb498624a9b",
					Index: 0,
					Value: new(big.Int).SetUint64(5508239557),
				},
				&types.TxInput{
					Hash:  "d527377e1589736bacbba29386d00445484ec15ba8c24faabb16acb498624a9b",
					Index: 1,
					Value: new(big.Int).SetUint64(5508239557),
				},
				&types.TxInput{
					Hash:  "d527377e1589736bacbba29386d00445484ec15ba8c24faabb16acb498624a9b",
					Index: 2,
					Value: new(big.Int).SetUint64(5508239557),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "RAHmrcPgnxCM9BvaUXwEPSCkUkJDocTCVk",
					Value:    new(big.Int).SetUint64(16524718671),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x03, 0x9b, 0x4a, 0x62, 0x98, 0xb4, 0xac, 0x16, 0xbb, 0xaa, 0x4f, 0xc2,
				0xa8, 0x5b, 0xc1, 0x4e, 0x48, 0x45, 0x04, 0xd0, 0x86, 0x93, 0xa2, 0xbb, 0xac, 0x6b, 0x73, 0x89,
				0x15, 0x7e, 0x37, 0x27, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30, 0x44, 0x02, 0x20, 0x00,
				0xbb, 0x85, 0x26, 0x2a, 0x61, 0x69, 0x43, 0x83, 0x44, 0x2a, 0x4f, 0x72, 0xfd, 0xf7, 0xde, 0xc5,
				0x41, 0x50, 0x5f, 0xbe, 0xf7, 0xfc, 0xd1, 0x50, 0xff, 0x79, 0x26, 0xb6, 0x0c, 0xa4, 0x57, 0x02,
				0x20, 0x49, 0x8b, 0x5a, 0xb0, 0xa6, 0xf5, 0xa6, 0x4f, 0xe8, 0xd8, 0x0f, 0x71, 0xde, 0xb9, 0xdf,
				0xbe, 0x11, 0x26, 0xf9, 0x9d, 0xe1, 0x8d, 0xa0, 0x50, 0xd8, 0x97, 0x22, 0xfa, 0xb3, 0x6e, 0x79,
				0x52, 0x01, 0x41, 0x04, 0xfc, 0x78, 0xbc, 0x1a, 0xd5, 0xbc, 0x02, 0x09, 0x21, 0x1e, 0xc6, 0x40,
				0xd9, 0x1c, 0x1a, 0x4b, 0x11, 0x15, 0x68, 0x1e, 0x4b, 0x94, 0x7c, 0xba, 0x40, 0xd0, 0x1e, 0x95,
				0xb0, 0xa7, 0xbc, 0xd6, 0xf9, 0x89, 0x7c, 0x95, 0xd6, 0xed, 0x2e, 0xf1, 0x25, 0x03, 0xf8, 0x26,
				0x17, 0x99, 0xc1, 0x76, 0x02, 0x1f, 0x2d, 0xf2, 0xce, 0xc1, 0x1f, 0x75, 0x17, 0x91, 0x3a, 0xcd,
				0x01, 0xe8, 0xaf, 0xea, 0xff, 0xff, 0xff, 0xff, 0x9b, 0x4a, 0x62, 0x98, 0xb4, 0xac, 0x16, 0xbb,
				0xaa, 0x4f, 0xc2, 0xa8, 0x5b, 0xc1, 0x4e, 0x48, 0x45, 0x04, 0xd0, 0x86, 0x93, 0xa2, 0xbb, 0xac,
				0x6b, 0x73, 0x89, 0x15, 0x7e, 0x37, 0x27, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x48, 0x30, 0x45,
				0x02, 0x21, 0x00, 0x98, 0x74, 0x0a, 0x53, 0x9c, 0xd7, 0xbd, 0xe7, 0x95, 0x01, 0x38, 0xb5, 0x4f,
				0xbf, 0xa4, 0xe4, 0x6b, 0x53, 0x38, 0x66, 0x05, 0xf3, 0x9d, 0xff, 0x01, 0x7e, 0x67, 0x1a, 0xb4,
				0xa0, 0x5a, 0xdd, 0x02, 0x20, 0x1f, 0xe0, 0x89, 0x80, 0xa3, 0x12, 0xa1, 0x79, 0x06, 0xb3, 0x3c,
				0xb2, 0x59, 0x33, 0x31, 0xf8, 0x96, 0xc2, 0x8c, 0xa3, 0x99, 0x35, 0x74, 0x63, 0x2d, 0x57, 0x62,
				0x29, 0xfe, 0xd9, 0x68, 0x25, 0x01, 0x41, 0x04, 0xfc, 0x78, 0xbc, 0x1a, 0xd5, 0xbc, 0x02, 0x09,
				0x21, 0x1e, 0xc6, 0x40, 0xd9, 0x1c, 0x1a, 0x4b, 0x11, 0x15, 0x68, 0x1e, 0x4b, 0x94, 0x7c, 0xba,
				0x40, 0xd0, 0x1e, 0x95, 0xb0, 0xa7, 0xbc, 0xd6, 0xf9, 0x89, 0x7c, 0x95, 0xd6, 0xed, 0x2e, 0xf1,
				0x25, 0x03, 0xf8, 0x26, 0x17, 0x99, 0xc1, 0x76, 0x02, 0x1f, 0x2d, 0xf2, 0xce, 0xc1, 0x1f, 0x75,
				0x17, 0x91, 0x3a, 0xcd, 0x01, 0xe8, 0xaf, 0xea, 0xff, 0xff, 0xff, 0xff, 0x9b, 0x4a, 0x62, 0x98,
				0xb4, 0xac, 0x16, 0xbb, 0xaa, 0x4f, 0xc2, 0xa8, 0x5b, 0xc1, 0x4e, 0x48, 0x45, 0x04, 0xd0, 0x86,
				0x93, 0xa2, 0xbb, 0xac, 0x6b, 0x73, 0x89, 0x15, 0x7e, 0x37, 0x27, 0xd5, 0x02, 0x00, 0x00, 0x00,
				0x8b, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00, 0xf2, 0x38, 0x78, 0xc9, 0xc4, 0xbc, 0x9c, 0x66, 0xbd,
				0xf9, 0x4c, 0xc6, 0xf4, 0x9c, 0xcb, 0xe8, 0xf2, 0xaf, 0xc0, 0x25, 0xbd, 0x65, 0x5e, 0xd4, 0x43,
				0xf8, 0xfc, 0x53, 0x19, 0x9f, 0xde, 0x3e, 0x02, 0x20, 0x7d, 0x85, 0x9b, 0xa1, 0x37, 0xfe, 0x06,
				0xb9, 0x03, 0xde, 0x17, 0x13, 0xbf, 0x7d, 0x4b, 0x47, 0xd6, 0x3f, 0x38, 0x65, 0x0d, 0x38, 0x6e,
				0xf2, 0x4e, 0x79, 0x17, 0x54, 0x9c, 0x01, 0x5e, 0x7b, 0x01, 0x41, 0x04, 0xfc, 0x78, 0xbc, 0x1a,
				0xd5, 0xbc, 0x02, 0x09, 0x21, 0x1e, 0xc6, 0x40, 0xd9, 0x1c, 0x1a, 0x4b, 0x11, 0x15, 0x68, 0x1e,
				0x4b, 0x94, 0x7c, 0xba, 0x40, 0xd0, 0x1e, 0x95, 0xb0, 0xa7, 0xbc, 0xd6, 0xf9, 0x89, 0x7c, 0x95,
				0xd6, 0xed, 0x2e, 0xf1, 0x25, 0x03, 0xf8, 0x26, 0x17, 0x99, 0xc1, 0x76, 0x02, 0x1f, 0x2d, 0xf2,
				0xce, 0xc1, 0x1f, 0x75, 0x17, 0x91, 0x3a, 0xcd, 0x01, 0xe8, 0xaf, 0xea, 0xff, 0xff, 0xff, 0xff,
				0x01, 0x9f, 0x67, 0xe1, 0xd8, 0x03, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x0b, 0x14, 0x52,
				0x62, 0xcc, 0xbc, 0x02, 0x10, 0x82, 0x00, 0xdb, 0x62, 0x78, 0xd8, 0x37, 0x78, 0xb3, 0x4b, 0xdb,
				0x03, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00,
			},
			txid: "c2f2453d115a47c0176945be367a74f92b594e2ce8c013547e15e4e04c379aea",
		},
		{
			priv:       "febe195f109e31cb696540d3f51b75ad317a03610db0f46da869c8d50e8177e6",
			baseTx:     baseTxRVN,
			feePerByte: 2000,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "95401b7e6ec8e025d0621031dfa468c19f6dcf1e1744c5bcfa8bbb4c1fb4bf8d",
					Index: 1,
					Value: new(big.Int).SetUint64(10959365589),
				},
				&types.TxInput{
					Hash:  "1c86786d74d7a2b828982c65f4c97c97c833cffbfb0392901137a375646ed019",
					Index: 2,
					Value: new(big.Int).SetUint64(5507656889),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "RAHmrcPgnxCM9BvaUXwEPSCkUkJDocTCVk",
					Value:    new(big.Int).SetUint64(16467022478),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x01, 0x00, 0x00, 0x00, 0x02, 0x8d, 0xbf, 0xb4, 0x1f, 0x4c, 0xbb, 0x8b, 0xfa, 0xbc, 0xc5, 0x44,
				0x17, 0x1e, 0xcf, 0x6d, 0x9f, 0xc1, 0x68, 0xa4, 0xdf, 0x31, 0x10, 0x62, 0xd0, 0x25, 0xe0, 0xc8,
				0x6e, 0x7e, 0x1b, 0x40, 0x95, 0x01, 0x00, 0x00, 0x00, 0x8b, 0x48, 0x30, 0x45, 0x02, 0x21, 0x00,
				0xf6, 0x14, 0x94, 0x0a, 0x16, 0x68, 0xd7, 0x0e, 0xcd, 0xba, 0x9d, 0x51, 0x77, 0x8b, 0x56, 0xde,
				0xce, 0xba, 0x5d, 0xe9, 0x9e, 0x7f, 0xa3, 0xdb, 0x2b, 0x19, 0x30, 0x7e, 0x2f, 0x14, 0xc1, 0xd6,
				0x02, 0x20, 0x75, 0xa7, 0x56, 0x63, 0x37, 0x67, 0xc6, 0x84, 0x7b, 0x6f, 0xe3, 0x02, 0xe9, 0xc8,
				0xd2, 0x95, 0x8d, 0x9a, 0xb8, 0x18, 0xc3, 0xc2, 0xd4, 0xef, 0x5a, 0x26, 0x77, 0x26, 0xbd, 0x99,
				0x53, 0x77, 0x01, 0x41, 0x04, 0xfc, 0x78, 0xbc, 0x1a, 0xd5, 0xbc, 0x02, 0x09, 0x21, 0x1e, 0xc6,
				0x40, 0xd9, 0x1c, 0x1a, 0x4b, 0x11, 0x15, 0x68, 0x1e, 0x4b, 0x94, 0x7c, 0xba, 0x40, 0xd0, 0x1e,
				0x95, 0xb0, 0xa7, 0xbc, 0xd6, 0xf9, 0x89, 0x7c, 0x95, 0xd6, 0xed, 0x2e, 0xf1, 0x25, 0x03, 0xf8,
				0x26, 0x17, 0x99, 0xc1, 0x76, 0x02, 0x1f, 0x2d, 0xf2, 0xce, 0xc1, 0x1f, 0x75, 0x17, 0x91, 0x3a,
				0xcd, 0x01, 0xe8, 0xaf, 0xea, 0xff, 0xff, 0xff, 0xff, 0x19, 0xd0, 0x6e, 0x64, 0x75, 0xa3, 0x37,
				0x11, 0x90, 0x92, 0x03, 0xfb, 0xfb, 0xcf, 0x33, 0xc8, 0x97, 0x7c, 0xc9, 0xf4, 0x65, 0x2c, 0x98,
				0x28, 0xb8, 0xa2, 0xd7, 0x74, 0x6d, 0x78, 0x86, 0x1c, 0x02, 0x00, 0x00, 0x00, 0x8a, 0x47, 0x30,
				0x44, 0x02, 0x20, 0x7c, 0x2e, 0x20, 0x92, 0x08, 0x0f, 0x27, 0x8f, 0x0e, 0xfd, 0xa5, 0x1d, 0xd5,
				0xb8, 0x49, 0x69, 0xca, 0x35, 0x47, 0x3b, 0x5d, 0xc0, 0x92, 0xc1, 0x45, 0xe1, 0x0e, 0x6a, 0xa4,
				0x59, 0xc5, 0xa4, 0x02, 0x20, 0x08, 0x7d, 0x9f, 0x29, 0x1a, 0x21, 0x03, 0x2d, 0x34, 0xca, 0x23,
				0x0b, 0xcc, 0x86, 0x01, 0x69, 0x6b, 0x81, 0x51, 0x88, 0x36, 0x76, 0x41, 0xb1, 0x67, 0x8b, 0xb9,
				0x10, 0xfc, 0x95, 0x9a, 0xd4, 0x01, 0x41, 0x04, 0xfc, 0x78, 0xbc, 0x1a, 0xd5, 0xbc, 0x02, 0x09,
				0x21, 0x1e, 0xc6, 0x40, 0xd9, 0x1c, 0x1a, 0x4b, 0x11, 0x15, 0x68, 0x1e, 0x4b, 0x94, 0x7c, 0xba,
				0x40, 0xd0, 0x1e, 0x95, 0xb0, 0xa7, 0xbc, 0xd6, 0xf9, 0x89, 0x7c, 0x95, 0xd6, 0xed, 0x2e, 0xf1,
				0x25, 0x03, 0xf8, 0x26, 0x17, 0x99, 0xc1, 0x76, 0x02, 0x1f, 0x2d, 0xf2, 0xce, 0xc1, 0x1f, 0x75,
				0x17, 0x91, 0x3a, 0xcd, 0x01, 0xe8, 0xaf, 0xea, 0xff, 0xff, 0xff, 0xff, 0x01, 0x1e, 0x86, 0x76,
				0xd5, 0x03, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x0b, 0x14, 0x52, 0x62, 0xcc, 0xbc, 0x02,
				0x10, 0x82, 0x00, 0xdb, 0x62, 0x78, 0xd8, 0x37, 0x78, 0xb3, 0x4b, 0xdb, 0x03, 0x88, 0xac, 0x00,
				0x00, 0x00, 0x00,
			},
			txid: "5388c6b9c9057aed0e37d12255437199708e3d87f3361e13b92fe2d45cc0a96f",
		},
	}

	for i, tt := range tests {
		privBytes, err := hex.DecodeString(tt.priv)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
			continue
		}
		priv := secp256k1.PrivKeyFromBytes(privBytes)

		tx, err := GenerateTx(priv, tt.baseTx, tt.inputs, tt.outputs, tt.feePerByte)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
		} else if bytes.Compare(tx, tt.tx) != 0 {
			t.Errorf("failed on %d: tx mismatch: have %x, want %x", i, tx, tt.tx)
		} else if txid := CalculateTxID(hex.EncodeToString(tx)); txid != tt.txid {
			t.Errorf("failed on %d: txid mismatch: have %s, want %s", i, txid, tt.txid)
		}
	}
}
