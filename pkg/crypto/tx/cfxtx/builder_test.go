package cfxtx

import (
	"encoding/hex"
	"math/big"
	"testing"

	"github.com/decred/dcrd/dcrec/secp256k1/v4"
)

func TestNewTx(t *testing.T) {
	tests := []struct {
		rawPriv     string
		address     string
		value       *big.Int
		gasPrice    *big.Int
		gasLimit    uint64
		nonce       uint64
		chainID     uint64
		epochNumber uint64
		txHex       []byte
		txFee       *big.Int
		txid        string
	}{
		{
			rawPriv:     "83d590f5efeacd03a05137273f2be70522cb6bfd85acc41682ef85c65a8e7500",
			address:     "cfx:aajpuruxmg5z90x07z2ynt2u5wrknz717ymnu6mhdp",
			value:       new(big.Int).SetUint64(0x0419308899983463),
			gasPrice:    new(big.Int).SetUint64(0x0021000000),
			gasLimit:    21000,
			nonce:       0x1,
			chainID:     1029,
			epochNumber: 48526529,
			txHex: []byte{
				0xf8, 0x75, 0xf1, 0x01, 0x84, 0x21, 0x00, 0x00, 0x00, 0x82, 0x52, 0x08, 0x94, 0x10, 0xc8, 0x36,
				0x13, 0x51, 0xb7, 0x5f, 0xda, 0x76, 0xed, 0x71, 0x45, 0xbf, 0x10, 0xdc, 0x9a, 0x95, 0xd7, 0xb7,
				0xed, 0x88, 0x04, 0x19, 0x25, 0xf5, 0x91, 0x98, 0x34, 0x63, 0x80, 0x84, 0x02, 0xe4, 0x74, 0xc1,
				0x82, 0x04, 0x05, 0x80, 0x01, 0xa0, 0x79, 0x0c, 0x41, 0x69, 0xdf, 0x5a, 0x4d, 0x81, 0x84, 0xae,
				0xcf, 0xe0, 0xc7, 0x0a, 0x0b, 0x0f, 0xd3, 0xdc, 0x8b, 0x8e, 0x51, 0x1e, 0x74, 0xe0, 0xad, 0x79,
				0xb7, 0xc0, 0xcf, 0xed, 0xb0, 0xc5, 0xa0, 0x1e, 0x5d, 0xb7, 0xc6, 0x84, 0x38, 0xcf, 0x46, 0xac,
				0xd5, 0x19, 0xfc, 0x80, 0xc8, 0x77, 0xaa, 0x4f, 0x2d, 0x1f, 0x56, 0xc4, 0x56, 0xa8, 0xfe, 0x8e,
				0xfa, 0xf3, 0xea, 0x69, 0x46, 0x5d, 0x66,
			},
			txFee: new(big.Int).SetUint64(11626610688000),
			txid:  "0x7a5fd3003c88c5ad8ef27747899a0d0f2b1cd35364a33c782b1229b87aa2f5c5",
		},
		{
			rawPriv:     "049b55cb98b79f3178050969c568000efcbfc746e08ac490ffc1369a4d9b6cc0",
			address:     "cfx:aajpuruxmg5z90x07z2ynt2u5wrknz717ymnu6mhdp",
			value:       new(big.Int).SetUint64(0x01419308899983463),
			gasPrice:    new(big.Int).SetUint64(0x0011020500),
			gasLimit:    11000,
			nonce:       0x142,
			chainID:     1029,
			epochNumber: 52514241,
			txHex: []byte{
				0xf8, 0x77, 0xf3, 0x82, 0x01, 0x42, 0x84, 0x11, 0x02, 0x05, 0x00, 0x82, 0x2a, 0xf8, 0x94, 0x10,
				0xc8, 0x36, 0x13, 0x51, 0xb7, 0x5f, 0xda, 0x76, 0xed, 0x71, 0x45, 0xbf, 0x10, 0xdc, 0x9a, 0x95,
				0xd7, 0xb7, 0xed, 0x88, 0x14, 0x19, 0x2d, 0xad, 0xca, 0xd1, 0x5c, 0x63, 0x80, 0x84, 0x03, 0x21,
				0x4d, 0xc1, 0x82, 0x04, 0x05, 0x80, 0x01, 0xa0, 0x86, 0x1f, 0x7b, 0x47, 0xb5, 0x6d, 0xe7, 0x0d,
				0x78, 0xe5, 0xf7, 0x4a, 0x03, 0xba, 0xbf, 0x68, 0x67, 0x8c, 0xce, 0x58, 0x9d, 0x9f, 0xad, 0xb9,
				0x6f, 0x53, 0xf2, 0xa6, 0x8b, 0x13, 0xd1, 0xc5, 0xa0, 0x5d, 0x0b, 0xa8, 0xd3, 0x80, 0x53, 0xae,
				0xe9, 0x08, 0x57, 0x37, 0x44, 0x04, 0xe5, 0x7a, 0xe2, 0x9d, 0xb2, 0x69, 0xa1, 0x0d, 0xa6, 0xfd,
				0x5c, 0x66, 0x8d, 0x98, 0xf5, 0xc5, 0x87, 0xf3, 0x77,
			},
			txFee: new(big.Int).SetUint64(3138795264000),
			txid:  "0x6e5d155c2ad8ff017dd4966f0f34593d602071f80a3b5db8f37f750bbb8bb3ab",
		},
		{
			rawPriv:     "fd531800d692ddeac5f444b6c71579ef8a55de1660da622deae4f212e21f47fc",
			address:     "cfx:aajpuruxmg5z90x07z2ynt2u5wrknz717ymnu6mhdp",
			value:       new(big.Int).SetUint64(0x09421512415132463),
			gasPrice:    new(big.Int).SetUint64(0x009152231),
			gasLimit:    13500,
			nonce:       0x999,
			chainID:     1029,
			epochNumber: 64124129,
			txHex: []byte{
				0xf8, 0x77, 0xf3, 0x82, 0x09, 0x99, 0x84, 0x09, 0x15, 0x22, 0x31, 0x82, 0x34, 0xbc, 0x94, 0x10,
				0xc8, 0x36, 0x13, 0x51, 0xb7, 0x5f, 0xda, 0x76, 0xed, 0x71, 0x45, 0xbf, 0x10, 0xdc, 0x9a, 0x95,
				0xd7, 0xb7, 0xed, 0x88, 0x94, 0x21, 0x4f, 0x45, 0x1e, 0x9c, 0x14, 0x67, 0x80, 0x84, 0x03, 0xd2,
				0x74, 0xe1, 0x82, 0x04, 0x05, 0x80, 0x01, 0xa0, 0xb4, 0xe3, 0xf9, 0x0d, 0x38, 0x62, 0xb6, 0x4c,
				0x7a, 0x9e, 0x29, 0x26, 0xb8, 0x10, 0x1c, 0xe6, 0x0a, 0x28, 0xf1, 0x7e, 0x2d, 0x33, 0x66, 0x85,
				0xbf, 0x59, 0x6e, 0x4a, 0xd7, 0x7b, 0x92, 0x1c, 0xa0, 0x77, 0x27, 0x9b, 0xa4, 0x3e, 0xd9, 0x76,
				0x9d, 0x4d, 0x69, 0x28, 0xac, 0xca, 0x51, 0xbf, 0xf0, 0xb0, 0x2f, 0x24, 0xc8, 0x7a, 0x80, 0x28,
				0xde, 0x3b, 0xcc, 0x40, 0x79, 0x04, 0xa4, 0x6c, 0xef,
			},
			txFee: new(big.Int).SetUint64(2057129365500),
			txid:  "0x31ca1e5211f55c183400b825e3655698bb3da28af6171fcd3b178c2d82d8c714",
		},
	}

	for i, tt := range tests {
		rawPrivBytes, err := hex.DecodeString(tt.rawPriv)
		if err != nil {
			t.Errorf("failed on %d: decode rawPriv: %v", i, err)
			continue
		}

		privKey := secp256k1.PrivKeyFromBytes(rawPrivBytes)
		txHex, txFee, err := NewTx(privKey, tt.address, nil, tt.value, tt.gasPrice,
			tt.gasLimit, 0, tt.nonce, tt.chainID, tt.epochNumber)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
			continue
		} else if txHex != "0x"+hex.EncodeToString(tt.txHex) {
			t.Errorf("failed on %d: tx hex mismatch: have %s, want 0x%x", i, txHex, tt.txHex)
			continue
		} else if txFee.Cmp(tt.txFee) != 0 {
			t.Errorf("failed on %d: tx fee mismatch: have %s, want %s", i, txFee, tt.txFee)
			continue
		}

		txid := CalculateTxID(txHex)
		if txid != tt.txid {
			t.Errorf("failed on %d: txid mismatch: have %s, want %s", i, txid, tt.txid)
		}
	}
}
