package nexatx

import (
	"bytes"
	"encoding/hex"
	"math/big"
	"testing"

	secp256k1 "github.com/decred/dcrd/dcrec/secp256k1/v4"

	"github.com/magicpool-co/pool/types"
)

var (
	baseTx = &Transaction{
		Prefix:   "nexatest",
		Version:  0,
		LockTime: 0,
	}
)

func TestGenerateTx(t *testing.T) {
	tests := []struct {
		priv       string
		baseTx     *Transaction
		inputs     []*types.TxInput
		outputs    []*types.TxOutput
		feePerByte uint64
		tx         []byte
		txIdem     string
		txid       string
	}{
		// NEXA testnet tests
		{
			priv:       "405f4400fd2e245e76979f86a0828d468ebb950a9be0c3e077833ae7a928b52e",
			baseTx:     baseTx,
			feePerByte: 5,
			inputs: []*types.TxInput{
				&types.TxInput{
					Index: 0,
					Hash:  "58e016e50cc8ec800e60fb4cc18a27a80f227d660a07e35b11418981a100b6ea",
					Value: new(big.Int).SetUint64(999494525),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "nexatest:qqusg34nkr7tnupmz8wragk5rrcenkgn7ca7qcpqrf",
					Value:    new(big.Int).SetUint64(101244512),
					SplitFee: false,
				},
				&types.TxOutput{
					Address:  "nexatest:qzrpqsursz4dprxly2zfrvh8qgu64zvfe56x2f5t62",
					Value:    new(big.Int).SetUint64(449125006),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "nexatest:qzrpqsursz4dprxly2zfrvh8qgu64zvfe56x2f5t62",
					Value:    new(big.Int).SetUint64(448925007),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "nexatest:nqtsq5g5djufwh9kgh3c9ktnryt4acfgwy294n7mwf0l9uq8",
					Value:    new(big.Int).SetUint64(100_000),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "nexatest:nqtsq5g56c5sgjl3wmynwjfj6rk0e4cawjm8kkcsp3f23wxn",
					Value:    new(big.Int).SetUint64(100_000),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x00, 0x01, 0x00, 0xe3, 0x61, 0x54, 0x18, 0xfd, 0x86, 0x55, 0xf3, 0x78, 0xe1, 0x90, 0x18, 0x59,
				0x5d, 0x88, 0x51, 0x9d, 0xac, 0x22, 0x6a, 0xf8, 0xba, 0x09, 0xcf, 0xf7, 0x3b, 0x48, 0xa5, 0x87,
				0x96, 0xb6, 0x66, 0x83, 0x40, 0xc6, 0xd6, 0x67, 0x3f, 0x12, 0xb7, 0x40, 0xe0, 0xc1, 0x98, 0x04,
				0xab, 0x0d, 0xeb, 0x3b, 0xa9, 0x40, 0x50, 0x68, 0x05, 0x58, 0x1e, 0x1a, 0xf6, 0xfb, 0x7d, 0xf1,
				0xe5, 0x0f, 0x98, 0x08, 0x6d, 0x97, 0x1c, 0x04, 0x21, 0xb6, 0x91, 0x30, 0xd1, 0x29, 0x7b, 0x8d,
				0x2e, 0xf5, 0x6f, 0x5b, 0x48, 0xc0, 0x12, 0x5f, 0x32, 0x31, 0x86, 0x6d, 0x5a, 0xac, 0x8f, 0xed,
				0x19, 0x5e, 0x1f, 0xc4, 0x07, 0x41, 0x04, 0x4a, 0x33, 0xa3, 0xae, 0x5a, 0x58, 0x48, 0x04, 0xd1,
				0xa8, 0xa0, 0x04, 0xe6, 0xd8, 0x66, 0x1c, 0x65, 0xd3, 0x8b, 0x20, 0xb0, 0x18, 0xc6, 0x67, 0xeb,
				0x1b, 0x0b, 0xe5, 0x01, 0x41, 0x77, 0x05, 0x4e, 0xab, 0x8d, 0x00, 0xd4, 0x44, 0xf7, 0xae, 0x2e,
				0x12, 0x13, 0x95, 0xb6, 0x16, 0xa4, 0x9f, 0x21, 0xc3, 0xf8, 0x79, 0x99, 0xb9, 0x4a, 0x63, 0x90,
				0x9a, 0xbf, 0x6a, 0xb9, 0x92, 0xc7, 0x73, 0xff, 0xff, 0xff, 0xff, 0x7d, 0x13, 0x93, 0x3b, 0x00,
				0x00, 0x00, 0x00, 0x05, 0x00, 0x60, 0xde, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9,
				0x14, 0x39, 0x04, 0x46, 0xb3, 0xb0, 0xfc, 0xb9, 0xf0, 0x3b, 0x11, 0xdc, 0x3e, 0xa2, 0xd4, 0x18,
				0xf1, 0x99, 0xd9, 0x13, 0xf6, 0x88, 0xac, 0x00, 0x16, 0x17, 0xc5, 0x1a, 0x00, 0x00, 0x00, 0x00,
				0x19, 0x76, 0xa9, 0x14, 0x86, 0x10, 0x43, 0x83, 0x80, 0xaa, 0xd0, 0x8c, 0xdf, 0x22, 0x84, 0x91,
				0xb2, 0xe7, 0x02, 0x39, 0xaa, 0x89, 0x89, 0xcd, 0x88, 0xac, 0x00, 0xd8, 0x09, 0xc2, 0x1a, 0x00,
				0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0x86, 0x10, 0x43, 0x83, 0x80, 0xaa, 0xd0, 0x8c, 0xdf,
				0x22, 0x84, 0x91, 0xb2, 0xe7, 0x02, 0x39, 0xaa, 0x89, 0x89, 0xcd, 0x88, 0xac, 0x01, 0xa0, 0x86,
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x51, 0x14, 0x6c, 0xb8, 0x97, 0x5c, 0xb6, 0x45,
				0xe3, 0x82, 0xd9, 0x73, 0x19, 0x17, 0x5e, 0xe1, 0x28, 0x71, 0x14, 0x5a, 0xcf, 0xdb, 0x01, 0xa0,
				0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x51, 0x14, 0xd6, 0x29, 0x04, 0x4b, 0xf1,
				0x76, 0xc9, 0x37, 0x49, 0x32, 0xd0, 0xec, 0xfc, 0xd7, 0x1d, 0x74, 0xb6, 0x7b, 0x5b, 0x10, 0x00,
				0x00, 0x00, 0x00,
			},
			txIdem: "871f2e7ba6cb49241b5fd344f93d867f94e0aff57844b80e7e620ed34ade779a",
			txid:   "b962c1e529df66933ce7fa2ef8082d87cb99b520a14df306d5a2c0a410cd9f0e",
		},
		{
			priv:       "405f4400fd2e245e76979f86a0828d468ebb950a9be0c3e077833ae7a928b52e",
			baseTx:     baseTx,
			feePerByte: 5,
			inputs: []*types.TxInput{
				&types.TxInput{
					Index: 0,
					Hash:  "871f2e7ba6cb49241b5fd344f93d867f94e0aff57844b80e7e620ed34ade779a",
					Value: new(big.Int).SetUint64(101244512),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "nexatest:qqusg34nkr7tnupmz8wragk5rrcenkgn7ca7qcpqrf",
					Value:    new(big.Int).SetUint64(101044512),
					SplitFee: false,
				},
				&types.TxOutput{
					Address:  "nexatest:nqtsq5g5djufwh9kgh3c9ktnryt4acfgwy294n7mwf0l9uq8",
					Value:    new(big.Int).SetUint64(100_000),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "nexatest:nqtsq5g56c5sgjl3wmynwjfj6rk0e4cawjm8kkcsp3f23wxn",
					Value:    new(big.Int).SetUint64(100_000),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x00, 0x01, 0x00, 0x9f, 0x03, 0x7e, 0xff, 0x7f, 0x3d, 0x62, 0x0b, 0xa8, 0x0f, 0xe9, 0x89, 0x3c,
				0x7c, 0x14, 0x83, 0x73, 0xa8, 0x14, 0x4d, 0x3d, 0x6b, 0x26, 0xbc, 0x25, 0xb0, 0x82, 0x64, 0x3c,
				0x03, 0x58, 0xcb, 0x83, 0x40, 0xf6, 0xec, 0x78, 0x28, 0xa6, 0x66, 0x6e, 0xd8, 0x03, 0x58, 0x3c,
				0xb6, 0xbd, 0x85, 0xbe, 0x6d, 0xae, 0xb6, 0x4b, 0x46, 0x0b, 0xac, 0x73, 0x20, 0xb2, 0x9f, 0x09,
				0xde, 0xf4, 0x9f, 0x9d, 0x49, 0xf0, 0xda, 0xff, 0x92, 0x40, 0x1d, 0x58, 0xfb, 0xea, 0xa8, 0xad,
				0x78, 0x5d, 0xdf, 0x5c, 0x84, 0xe8, 0xa0, 0xc6, 0x21, 0x1d, 0x52, 0xaa, 0x92, 0xb1, 0x1f, 0xc8,
				0x33, 0xa0, 0x81, 0xb5, 0x1c, 0x41, 0x04, 0x4a, 0x33, 0xa3, 0xae, 0x5a, 0x58, 0x48, 0x04, 0xd1,
				0xa8, 0xa0, 0x04, 0xe6, 0xd8, 0x66, 0x1c, 0x65, 0xd3, 0x8b, 0x20, 0xb0, 0x18, 0xc6, 0x67, 0xeb,
				0x1b, 0x0b, 0xe5, 0x01, 0x41, 0x77, 0x05, 0x4e, 0xab, 0x8d, 0x00, 0xd4, 0x44, 0xf7, 0xae, 0x2e,
				0x12, 0x13, 0x95, 0xb6, 0x16, 0xa4, 0x9f, 0x21, 0xc3, 0xf8, 0x79, 0x99, 0xb9, 0x4a, 0x63, 0x90,
				0x9a, 0xbf, 0x6a, 0xb9, 0x92, 0xc7, 0x73, 0xff, 0xff, 0xff, 0xff, 0x60, 0xde, 0x08, 0x06, 0x00,
				0x00, 0x00, 0x00, 0x03, 0x00, 0x20, 0xd1, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9,
				0x14, 0x39, 0x04, 0x46, 0xb3, 0xb0, 0xfc, 0xb9, 0xf0, 0x3b, 0x11, 0xdc, 0x3e, 0xa2, 0xd4, 0x18,
				0xf1, 0x99, 0xd9, 0x13, 0xf6, 0x88, 0xac, 0x01, 0xd7, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x17, 0x00, 0x51, 0x14, 0x6c, 0xb8, 0x97, 0x5c, 0xb6, 0x45, 0xe3, 0x82, 0xd9, 0x73, 0x19, 0x17,
				0x5e, 0xe1, 0x28, 0x71, 0x14, 0x5a, 0xcf, 0xdb, 0x01, 0xd8, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x17, 0x00, 0x51, 0x14, 0xd6, 0x29, 0x04, 0x4b, 0xf1, 0x76, 0xc9, 0x37, 0x49, 0x32, 0xd0,
				0xec, 0xfc, 0xd7, 0x1d, 0x74, 0xb6, 0x7b, 0x5b, 0x10, 0x00, 0x00, 0x00, 0x00,
			},
			txIdem: "20a174c782bd038f6888ca14e4da7c814a2c41476c454fb57ff4dc0821c2faa9",
			txid:   "73a1d7e952f022e04f7b38630ae3b864f38f0a245639cff59e67da36b7db09b2",
		},
		{
			priv:       "d6edfcab4134a8405b86687c9bf6521bdce5c0405c8308e17937e8e7f50ea057",
			baseTx:     baseTx,
			feePerByte: 5,
			inputs: []*types.TxInput{
				&types.TxInput{
					Index: 1,
					Hash:  "871f2e7ba6cb49241b5fd344f93d867f94e0aff57844b80e7e620ed34ade779a",
					Value: new(big.Int).SetUint64(449124118),
				},
				&types.TxInput{
					Index: 2,
					Hash:  "871f2e7ba6cb49241b5fd344f93d867f94e0aff57844b80e7e620ed34ade779a",
					Value: new(big.Int).SetUint64(448924120),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "nexatest:qqusg34nkr7tnupmz8wragk5rrcenkgn7ca7qcpqrf",
					Value:    new(big.Int).SetUint64(898048238),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x00, 0x02, 0x00, 0xc3, 0xbf, 0xeb, 0xce, 0xd4, 0xa4, 0x90, 0x70, 0x2f, 0xb9, 0x6e, 0x13, 0xd2,
				0xcf, 0x99, 0x1e, 0x9a, 0x08, 0x64, 0xaf, 0x6b, 0x90, 0x44, 0x1b, 0x4f, 0x1d, 0xae, 0x52, 0xa8,
				0x4f, 0xfb, 0xa6, 0x83, 0x40, 0x0f, 0x1b, 0x0c, 0xd8, 0x3e, 0x0d, 0x57, 0x19, 0x40, 0xa6, 0x3d,
				0x76, 0xc9, 0xa3, 0x9f, 0xff, 0x23, 0x9f, 0xdd, 0x08, 0x63, 0x15, 0x22, 0xfb, 0xd0, 0x82, 0x6d,
				0x8b, 0xd8, 0x05, 0xbc, 0xb1, 0x49, 0xaa, 0x28, 0xe0, 0x2d, 0xf7, 0xe8, 0xa7, 0x2e, 0xa5, 0xc5,
				0x25, 0xf2, 0xf7, 0xb5, 0x97, 0xe1, 0x8f, 0x62, 0x1c, 0x01, 0xec, 0xcb, 0x62, 0x9f, 0x8e, 0xbd,
				0x2b, 0x6e, 0x02, 0x53, 0x89, 0x41, 0x04, 0x3e, 0x08, 0xe5, 0xcf, 0x69, 0xe0, 0x77, 0xb1, 0xde,
				0x86, 0x65, 0x02, 0xfe, 0xd9, 0xe3, 0x0b, 0xea, 0xc6, 0x62, 0x44, 0x93, 0x98, 0x32, 0xc3, 0xaa,
				0xf7, 0x97, 0x9f, 0x5d, 0xe6, 0xea, 0xb9, 0xd5, 0x10, 0xf1, 0x78, 0x35, 0x12, 0xb2, 0x68, 0xb5,
				0x1e, 0x4b, 0xe6, 0xc9, 0x17, 0xf0, 0xb4, 0x92, 0xe0, 0x86, 0x93, 0x2e, 0x05, 0xad, 0xdd, 0x1b,
				0xa0, 0xab, 0x95, 0x75, 0xcb, 0xd8, 0x7d, 0xff, 0xff, 0xff, 0xff, 0x16, 0x17, 0xc5, 0x1a, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x30, 0x01, 0x85, 0xb0, 0x2a, 0x8e, 0xde, 0xc7, 0x8e, 0xbb, 0xa6, 0xcc,
				0x95, 0xbc, 0xbe, 0x03, 0x40, 0xde, 0x71, 0x46, 0x5e, 0xc4, 0x07, 0xdc, 0x8b, 0xeb, 0x2e, 0x0f,
				0x4c, 0x2c, 0x48, 0x90, 0x83, 0x40, 0x0f, 0x1b, 0x0c, 0xd8, 0x3e, 0x0d, 0x57, 0x19, 0x40, 0xa6,
				0x3d, 0x76, 0xc9, 0xa3, 0x9f, 0xff, 0x23, 0x9f, 0xdd, 0x08, 0x63, 0x15, 0x22, 0xfb, 0xd0, 0x82,
				0x6d, 0x8b, 0xd8, 0x05, 0xbc, 0xb1, 0x49, 0xaa, 0x28, 0xe0, 0x2d, 0xf7, 0xe8, 0xa7, 0x2e, 0xa5,
				0xc5, 0x25, 0xf2, 0xf7, 0xb5, 0x97, 0xe1, 0x8f, 0x62, 0x1c, 0x01, 0xec, 0xcb, 0x62, 0x9f, 0x8e,
				0xbd, 0x2b, 0x6e, 0x02, 0x53, 0x89, 0x41, 0x04, 0x3e, 0x08, 0xe5, 0xcf, 0x69, 0xe0, 0x77, 0xb1,
				0xde, 0x86, 0x65, 0x02, 0xfe, 0xd9, 0xe3, 0x0b, 0xea, 0xc6, 0x62, 0x44, 0x93, 0x98, 0x32, 0xc3,
				0xaa, 0xf7, 0x97, 0x9f, 0x5d, 0xe6, 0xea, 0xb9, 0xd5, 0x10, 0xf1, 0x78, 0x35, 0x12, 0xb2, 0x68,
				0xb5, 0x1e, 0x4b, 0xe6, 0xc9, 0x17, 0xf0, 0xb4, 0x92, 0xe0, 0x86, 0x93, 0x2e, 0x05, 0xad, 0xdd,
				0x1b, 0xa0, 0xab, 0x95, 0x75, 0xcb, 0xd8, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xd8, 0x09, 0xc2, 0x1a,
				0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x32, 0x19, 0x87, 0x35, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76,
				0xa9, 0x14, 0x39, 0x04, 0x46, 0xb3, 0xb0, 0xfc, 0xb9, 0xf0, 0x3b, 0x11, 0xdc, 0x3e, 0xa2, 0xd4,
				0x18, 0xf1, 0x99, 0xd9, 0x13, 0xf6, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00,
			},
			txIdem: "189ab2704c1c094b154a853ccdff8a4c0ac9bb8a872ebf27fd363206ffd3e7e0",
			txid:   "8a53364e1a5bb5c2332ffe2a7fc6ffbd6859a0a1c6f6b71ede1c48fa11a607f2",
		},
	}

	for i, tt := range tests {
		privBytes, err := hex.DecodeString(tt.priv)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
			continue
		}
		priv := secp256k1.PrivKeyFromBytes(privBytes)

		tx, err := GenerateTx(priv, tt.baseTx, tt.inputs, tt.outputs, tt.feePerByte)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
		} else if bytes.Compare(tx, tt.tx) != 0 {
			t.Errorf("failed on %d: tx mismatch: have %x, want %x", i, tx, tt.tx)
		} else if txIdem := CalculateTxIdem(hex.EncodeToString(tx)); txIdem != tt.txIdem {
			t.Errorf("failed on %d: txIdem mismatch: have %s, want %s", i, txIdem, tt.txIdem)
		} else if txid := CalculateTxID(hex.EncodeToString(tx)); txid != tt.txid {
			t.Errorf("failed on %d: txid mismatch: have %s, want %s", i, txid, tt.txid)
		}
	}
}
