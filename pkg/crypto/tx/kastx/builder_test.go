package kastx

import (
	"bytes"
	"encoding/hex"
	"math/big"
	"testing"

	secp256k1 "github.com/decred/dcrd/dcrec/secp256k1/v4"

	"github.com/magicpool-co/pool/types"
)

func TestGenerateTx(t *testing.T) {
	tests := []struct {
		priv        string
		prefix      string
		feePerInput uint64
		inputs      []*types.TxInput
		outputs     []*types.TxOutput
		tx          []byte
		txid        string
		txMass      uint64
	}{
		{
			priv:        "2c1436e4956d088f14ab2869e1a4a177a578dbc109e86aca29b73b65a6f707f3",
			prefix:      "kaspatest",
			feePerInput: 10000,
			inputs: []*types.TxInput{
				&types.TxInput{
					Hash:  "9e7d24b9617bb9e42476aa9aeff4d2cabb0c706bb1b7c9a4e47e7c376375edec",
					Index: 0,
					Value: new(big.Int).SetUint64(20765229878),
				},
				&types.TxInput{
					Hash:  "cdc41bb58d385d12dcc6e60a58b164453d363c7d97a59df88857fe83f4eecda7",
					Index: 0,
					Value: new(big.Int).SetUint64(20765229878),
				},
				&types.TxInput{
					Hash:  "d6e1f7c4d15e0c36c4bd2cc8a85ba33b9b1098b7c013ee6948ddc3581dfecafb",
					Index: 0,
					Value: new(big.Int).SetUint64(20765229878),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "kaspatest:qq4fnmnql7ffuw2nuhxh6pxqva4c8n8wxt8df5uwwyr38n3wkpzyzmnlwha8g",
					Value:    new(big.Int).SetUint64(20765229878),
					SplitFee: true,
				},
				&types.TxOutput{
					Address:  "kaspatest:qyp55var4ed9sjqy6x52qp8xmpnpcewn3vstqxxxvl43kzl9q9qhwpgyfy07x9e",
					Value:    new(big.Int).SetUint64(20765229878),
					SplitFee: false,
				},
				&types.TxOutput{
					Address:  "kaspatest:qyp55var4ed9sjqy6x52qp8xmpnpcewn3vstqxxxvl43kzl9q9qhwpgyfy07x9e",
					Value:    new(big.Int).SetUint64(20765229878),
					SplitFee: false,
				},
			},
			tx: []byte{
				0x12, 0xcd, 0x01, 0x0a, 0x42, 0x0a, 0x40, 0x39, 0x65, 0x37, 0x64, 0x32, 0x34, 0x62, 0x39, 0x36,
				0x31, 0x37, 0x62, 0x62, 0x39, 0x65, 0x34, 0x32, 0x34, 0x37, 0x36, 0x61, 0x61, 0x39, 0x61, 0x65,
				0x66, 0x66, 0x34, 0x64, 0x32, 0x63, 0x61, 0x62, 0x62, 0x30, 0x63, 0x37, 0x30, 0x36, 0x62, 0x62,
				0x31, 0x62, 0x37, 0x63, 0x39, 0x61, 0x34, 0x65, 0x34, 0x37, 0x65, 0x37, 0x63, 0x33, 0x37, 0x36,
				0x33, 0x37, 0x35, 0x65, 0x64, 0x65, 0x63, 0x12, 0x84, 0x01, 0x34, 0x31, 0x34, 0x63, 0x61, 0x63,
				0x37, 0x63, 0x64, 0x64, 0x61, 0x64, 0x38, 0x65, 0x37, 0x37, 0x64, 0x31, 0x63, 0x65, 0x31, 0x63,
				0x34, 0x32, 0x34, 0x32, 0x33, 0x35, 0x62, 0x36, 0x39, 0x38, 0x32, 0x39, 0x38, 0x31, 0x64, 0x32,
				0x65, 0x64, 0x34, 0x32, 0x62, 0x34, 0x66, 0x30, 0x64, 0x66, 0x64, 0x31, 0x35, 0x31, 0x64, 0x61,
				0x33, 0x38, 0x32, 0x65, 0x64, 0x64, 0x35, 0x39, 0x63, 0x37, 0x35, 0x32, 0x31, 0x35, 0x30, 0x66,
				0x32, 0x35, 0x39, 0x33, 0x65, 0x34, 0x65, 0x32, 0x36, 0x64, 0x61, 0x62, 0x63, 0x36, 0x35, 0x32,
				0x30, 0x30, 0x32, 0x66, 0x65, 0x33, 0x31, 0x39, 0x36, 0x63, 0x62, 0x39, 0x39, 0x38, 0x39, 0x33,
				0x38, 0x66, 0x38, 0x33, 0x62, 0x34, 0x63, 0x66, 0x64, 0x62, 0x63, 0x64, 0x30, 0x64, 0x34, 0x35,
				0x38, 0x32, 0x36, 0x64, 0x61, 0x62, 0x38, 0x38, 0x66, 0x37, 0x36, 0x64, 0x30, 0x31, 0x28, 0x01,
				0x12, 0xcd, 0x01, 0x0a, 0x42, 0x0a, 0x40, 0x63, 0x64, 0x63, 0x34, 0x31, 0x62, 0x62, 0x35, 0x38,
				0x64, 0x33, 0x38, 0x35, 0x64, 0x31, 0x32, 0x64, 0x63, 0x63, 0x36, 0x65, 0x36, 0x30, 0x61, 0x35,
				0x38, 0x62, 0x31, 0x36, 0x34, 0x34, 0x35, 0x33, 0x64, 0x33, 0x36, 0x33, 0x63, 0x37, 0x64, 0x39,
				0x37, 0x61, 0x35, 0x39, 0x64, 0x66, 0x38, 0x38, 0x38, 0x35, 0x37, 0x66, 0x65, 0x38, 0x33, 0x66,
				0x34, 0x65, 0x65, 0x63, 0x64, 0x61, 0x37, 0x12, 0x84, 0x01, 0x34, 0x31, 0x33, 0x37, 0x65, 0x63,
				0x66, 0x34, 0x34, 0x33, 0x66, 0x35, 0x31, 0x30, 0x33, 0x31, 0x39, 0x37, 0x61, 0x61, 0x39, 0x31,
				0x36, 0x63, 0x61, 0x37, 0x31, 0x66, 0x36, 0x66, 0x33, 0x39, 0x39, 0x63, 0x35, 0x66, 0x62, 0x33,
				0x33, 0x38, 0x39, 0x38, 0x33, 0x66, 0x37, 0x61, 0x31, 0x33, 0x34, 0x34, 0x33, 0x34, 0x37, 0x64,
				0x62, 0x31, 0x63, 0x38, 0x61, 0x37, 0x30, 0x38, 0x35, 0x33, 0x62, 0x35, 0x34, 0x33, 0x38, 0x32,
				0x37, 0x61, 0x37, 0x38, 0x62, 0x37, 0x62, 0x66, 0x33, 0x61, 0x33, 0x30, 0x34, 0x65, 0x64, 0x62,
				0x39, 0x34, 0x65, 0x30, 0x61, 0x37, 0x38, 0x64, 0x33, 0x37, 0x61, 0x32, 0x33, 0x37, 0x62, 0x33,
				0x63, 0x38, 0x65, 0x66, 0x30, 0x62, 0x39, 0x65, 0x63, 0x36, 0x36, 0x39, 0x31, 0x31, 0x38, 0x62,
				0x31, 0x65, 0x64, 0x62, 0x64, 0x31, 0x62, 0x36, 0x30, 0x38, 0x36, 0x61, 0x30, 0x31, 0x28, 0x01,
				0x12, 0xcd, 0x01, 0x0a, 0x42, 0x0a, 0x40, 0x64, 0x36, 0x65, 0x31, 0x66, 0x37, 0x63, 0x34, 0x64,
				0x31, 0x35, 0x65, 0x30, 0x63, 0x33, 0x36, 0x63, 0x34, 0x62, 0x64, 0x32, 0x63, 0x63, 0x38, 0x61,
				0x38, 0x35, 0x62, 0x61, 0x33, 0x33, 0x62, 0x39, 0x62, 0x31, 0x30, 0x39, 0x38, 0x62, 0x37, 0x63,
				0x30, 0x31, 0x33, 0x65, 0x65, 0x36, 0x39, 0x34, 0x38, 0x64, 0x64, 0x63, 0x33, 0x35, 0x38, 0x31,
				0x64, 0x66, 0x65, 0x63, 0x61, 0x66, 0x62, 0x12, 0x84, 0x01, 0x34, 0x31, 0x63, 0x38, 0x63, 0x61,
				0x64, 0x36, 0x39, 0x66, 0x32, 0x35, 0x61, 0x38, 0x33, 0x63, 0x39, 0x64, 0x61, 0x39, 0x35, 0x30,
				0x31, 0x62, 0x66, 0x34, 0x63, 0x30, 0x38, 0x62, 0x35, 0x62, 0x65, 0x34, 0x31, 0x33, 0x30, 0x36,
				0x36, 0x34, 0x36, 0x65, 0x64, 0x31, 0x33, 0x35, 0x37, 0x61, 0x61, 0x61, 0x64, 0x61, 0x36, 0x31,
				0x37, 0x30, 0x36, 0x36, 0x36, 0x39, 0x38, 0x37, 0x32, 0x61, 0x38, 0x61, 0x35, 0x35, 0x34, 0x34,
				0x30, 0x65, 0x65, 0x37, 0x61, 0x37, 0x35, 0x37, 0x34, 0x37, 0x65, 0x64, 0x63, 0x36, 0x61, 0x36,
				0x65, 0x37, 0x65, 0x35, 0x65, 0x62, 0x36, 0x32, 0x33, 0x30, 0x39, 0x36, 0x37, 0x31, 0x32, 0x30,
				0x33, 0x31, 0x34, 0x38, 0x33, 0x64, 0x35, 0x36, 0x39, 0x38, 0x36, 0x66, 0x30, 0x66, 0x66, 0x65,
				0x31, 0x30, 0x31, 0x37, 0x66, 0x65, 0x32, 0x37, 0x62, 0x66, 0x31, 0x64, 0x30, 0x31, 0x28, 0x01,
				0x1a, 0x4e, 0x08, 0x86, 0x9c, 0xcf, 0xad, 0x4d, 0x12, 0x46, 0x12, 0x44, 0x32, 0x30, 0x32, 0x61,
				0x39, 0x39, 0x65, 0x65, 0x36, 0x30, 0x66, 0x66, 0x39, 0x32, 0x39, 0x65, 0x33, 0x39, 0x35, 0x33,
				0x65, 0x35, 0x63, 0x64, 0x37, 0x64, 0x30, 0x34, 0x63, 0x30, 0x36, 0x37, 0x36, 0x62, 0x38, 0x33,
				0x63, 0x63, 0x65, 0x65, 0x33, 0x32, 0x63, 0x65, 0x64, 0x34, 0x64, 0x33, 0x38, 0x65, 0x37, 0x31,
				0x30, 0x37, 0x31, 0x33, 0x63, 0x65, 0x32, 0x65, 0x62, 0x30, 0x34, 0x34, 0x34, 0x31, 0x61, 0x63,
				0x1a, 0x50, 0x08, 0xb6, 0x86, 0xd1, 0xad, 0x4d, 0x12, 0x48, 0x12, 0x46, 0x32, 0x31, 0x30, 0x33,
				0x34, 0x61, 0x33, 0x33, 0x61, 0x33, 0x61, 0x65, 0x35, 0x61, 0x35, 0x38, 0x34, 0x38, 0x30, 0x34,
				0x64, 0x31, 0x61, 0x38, 0x61, 0x30, 0x30, 0x34, 0x65, 0x36, 0x64, 0x38, 0x36, 0x36, 0x31, 0x63,
				0x36, 0x35, 0x64, 0x33, 0x38, 0x62, 0x32, 0x30, 0x62, 0x30, 0x31, 0x38, 0x63, 0x36, 0x36, 0x37,
				0x65, 0x62, 0x31, 0x62, 0x30, 0x62, 0x65, 0x35, 0x30, 0x31, 0x34, 0x31, 0x37, 0x37, 0x30, 0x35,
				0x61, 0x62, 0x1a, 0x50, 0x08, 0xb6, 0x86, 0xd1, 0xad, 0x4d, 0x12, 0x48, 0x12, 0x46, 0x32, 0x31,
				0x30, 0x33, 0x34, 0x61, 0x33, 0x33, 0x61, 0x33, 0x61, 0x65, 0x35, 0x61, 0x35, 0x38, 0x34, 0x38,
				0x30, 0x34, 0x64, 0x31, 0x61, 0x38, 0x61, 0x30, 0x30, 0x34, 0x65, 0x36, 0x64, 0x38, 0x36, 0x36,
				0x31, 0x63, 0x36, 0x35, 0x64, 0x33, 0x38, 0x62, 0x32, 0x30, 0x62, 0x30, 0x31, 0x38, 0x63, 0x36,
				0x36, 0x37, 0x65, 0x62, 0x31, 0x62, 0x30, 0x62, 0x65, 0x35, 0x30, 0x31, 0x34, 0x31, 0x37, 0x37,
				0x30, 0x35, 0x61, 0x62, 0x2a, 0x28, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			},
			txid:   "27f9f94a63b9daf75b15a16521209786da947078efcdc5eced6d8a2dc8a19d58",
			txMass: 5010,
		},
		{
			priv:        "405f4400fd2e245e76979f86a0828d468ebb950a9be0c3e077833ae7a928b52e",
			prefix:      "kaspatest",
			feePerInput: 10000,
			inputs: []*types.TxInput{
				&types.TxInput{
					Index: 1,
					Hash:  "27f9f94a63b9daf75b15a16521209786da947078efcdc5eced6d8a2dc8a19d58",
					Value: new(big.Int).SetUint64(20765229878),
				},
				&types.TxInput{
					Index: 2,
					Hash:  "27f9f94a63b9daf75b15a16521209786da947078efcdc5eced6d8a2dc8a19d58",
					Value: new(big.Int).SetUint64(20765229878),
				},
				&types.TxInput{
					Index: 1,
					Hash:  "9e7d24b9617bb9e42476aa9aeff4d2cabb0c706bb1b7c9a4e47e7c376375edec",
					Value: new(big.Int).SetUint64(20765229879),
				},
				&types.TxInput{
					Index: 1,
					Hash:  "cdc41bb58d385d12dcc6e60a58b164453d363c7d97a59df88857fe83f4eecda7",
					Value: new(big.Int).SetUint64(20765229879),
				},
				&types.TxInput{
					Index: 1,
					Hash:  "d6e1f7c4d15e0c36c4bd2cc8a85ba33b9b1098b7c013ee6948ddc3581dfecafb",
					Value: new(big.Int).SetUint64(20765229879),
				},
			},
			outputs: []*types.TxOutput{
				&types.TxOutput{
					Address:  "kaspatest:qypnk5xm3v5s329ypkj2hhzl9n4qmmtgesajgfg86705ky9g2mv4f7s826d504d",
					Value:    new(big.Int).SetUint64(103826149393),
					SplitFee: true,
				},
			},
			tx: []byte{
				0x12, 0xcf, 0x01, 0x0a, 0x44, 0x0a, 0x40, 0x32, 0x37, 0x66, 0x39, 0x66, 0x39, 0x34, 0x61, 0x36,
				0x33, 0x62, 0x39, 0x64, 0x61, 0x66, 0x37, 0x35, 0x62, 0x31, 0x35, 0x61, 0x31, 0x36, 0x35, 0x32,
				0x31, 0x32, 0x30, 0x39, 0x37, 0x38, 0x36, 0x64, 0x61, 0x39, 0x34, 0x37, 0x30, 0x37, 0x38, 0x65,
				0x66, 0x63, 0x64, 0x63, 0x35, 0x65, 0x63, 0x65, 0x64, 0x36, 0x64, 0x38, 0x61, 0x32, 0x64, 0x63,
				0x38, 0x61, 0x31, 0x39, 0x64, 0x35, 0x38, 0x10, 0x01, 0x12, 0x84, 0x01, 0x34, 0x31, 0x31, 0x62,
				0x31, 0x30, 0x63, 0x63, 0x63, 0x39, 0x64, 0x62, 0x34, 0x62, 0x30, 0x30, 0x65, 0x31, 0x37, 0x31,
				0x39, 0x62, 0x62, 0x38, 0x64, 0x37, 0x30, 0x38, 0x32, 0x65, 0x64, 0x33, 0x66, 0x36, 0x31, 0x66,
				0x32, 0x65, 0x33, 0x31, 0x61, 0x32, 0x65, 0x63, 0x33, 0x63, 0x32, 0x66, 0x64, 0x37, 0x64, 0x34,
				0x37, 0x64, 0x32, 0x30, 0x35, 0x66, 0x61, 0x34, 0x61, 0x33, 0x65, 0x35, 0x33, 0x61, 0x31, 0x62,
				0x38, 0x63, 0x62, 0x33, 0x30, 0x33, 0x61, 0x31, 0x30, 0x39, 0x62, 0x63, 0x37, 0x61, 0x38, 0x37,
				0x64, 0x32, 0x38, 0x34, 0x33, 0x66, 0x30, 0x30, 0x65, 0x39, 0x38, 0x38, 0x65, 0x63, 0x39, 0x30,
				0x31, 0x39, 0x38, 0x39, 0x39, 0x62, 0x63, 0x38, 0x62, 0x39, 0x35, 0x37, 0x62, 0x39, 0x31, 0x32,
				0x66, 0x64, 0x37, 0x62, 0x32, 0x36, 0x66, 0x66, 0x65, 0x39, 0x65, 0x35, 0x39, 0x33, 0x30, 0x31,
				0x28, 0x01, 0x12, 0xcf, 0x01, 0x0a, 0x44, 0x0a, 0x40, 0x32, 0x37, 0x66, 0x39, 0x66, 0x39, 0x34,
				0x61, 0x36, 0x33, 0x62, 0x39, 0x64, 0x61, 0x66, 0x37, 0x35, 0x62, 0x31, 0x35, 0x61, 0x31, 0x36,
				0x35, 0x32, 0x31, 0x32, 0x30, 0x39, 0x37, 0x38, 0x36, 0x64, 0x61, 0x39, 0x34, 0x37, 0x30, 0x37,
				0x38, 0x65, 0x66, 0x63, 0x64, 0x63, 0x35, 0x65, 0x63, 0x65, 0x64, 0x36, 0x64, 0x38, 0x61, 0x32,
				0x64, 0x63, 0x38, 0x61, 0x31, 0x39, 0x64, 0x35, 0x38, 0x10, 0x02, 0x12, 0x84, 0x01, 0x34, 0x31,
				0x31, 0x39, 0x39, 0x32, 0x30, 0x35, 0x36, 0x33, 0x36, 0x63, 0x37, 0x32, 0x38, 0x37, 0x65, 0x39,
				0x65, 0x31, 0x31, 0x66, 0x33, 0x38, 0x62, 0x61, 0x32, 0x34, 0x34, 0x30, 0x63, 0x37, 0x31, 0x38,
				0x35, 0x61, 0x35, 0x62, 0x31, 0x38, 0x66, 0x62, 0x31, 0x64, 0x65, 0x30, 0x30, 0x36, 0x32, 0x61,
				0x30, 0x35, 0x66, 0x62, 0x39, 0x33, 0x33, 0x31, 0x38, 0x37, 0x36, 0x64, 0x66, 0x32, 0x35, 0x65,
				0x35, 0x66, 0x63, 0x31, 0x66, 0x62, 0x30, 0x31, 0x61, 0x33, 0x61, 0x66, 0x35, 0x62, 0x34, 0x35,
				0x38, 0x31, 0x65, 0x33, 0x38, 0x63, 0x35, 0x61, 0x34, 0x30, 0x37, 0x64, 0x61, 0x38, 0x65, 0x30,
				0x35, 0x39, 0x64, 0x39, 0x30, 0x63, 0x39, 0x63, 0x62, 0x39, 0x38, 0x63, 0x36, 0x37, 0x63, 0x30,
				0x64, 0x34, 0x65, 0x30, 0x39, 0x34, 0x65, 0x33, 0x37, 0x32, 0x33, 0x39, 0x61, 0x32, 0x30, 0x62,
				0x30, 0x31, 0x28, 0x01, 0x12, 0xcf, 0x01, 0x0a, 0x44, 0x0a, 0x40, 0x39, 0x65, 0x37, 0x64, 0x32,
				0x34, 0x62, 0x39, 0x36, 0x31, 0x37, 0x62, 0x62, 0x39, 0x65, 0x34, 0x32, 0x34, 0x37, 0x36, 0x61,
				0x61, 0x39, 0x61, 0x65, 0x66, 0x66, 0x34, 0x64, 0x32, 0x63, 0x61, 0x62, 0x62, 0x30, 0x63, 0x37,
				0x30, 0x36, 0x62, 0x62, 0x31, 0x62, 0x37, 0x63, 0x39, 0x61, 0x34, 0x65, 0x34, 0x37, 0x65, 0x37,
				0x63, 0x33, 0x37, 0x36, 0x33, 0x37, 0x35, 0x65, 0x64, 0x65, 0x63, 0x10, 0x01, 0x12, 0x84, 0x01,
				0x34, 0x31, 0x31, 0x37, 0x64, 0x64, 0x63, 0x38, 0x39, 0x32, 0x36, 0x34, 0x39, 0x35, 0x33, 0x63,
				0x36, 0x31, 0x62, 0x66, 0x65, 0x37, 0x32, 0x30, 0x32, 0x36, 0x63, 0x61, 0x30, 0x62, 0x62, 0x32,
				0x62, 0x30, 0x38, 0x33, 0x33, 0x35, 0x32, 0x62, 0x32, 0x62, 0x63, 0x35, 0x63, 0x33, 0x35, 0x35,
				0x31, 0x39, 0x33, 0x32, 0x38, 0x30, 0x31, 0x38, 0x61, 0x35, 0x30, 0x30, 0x66, 0x32, 0x32, 0x35,
				0x62, 0x37, 0x33, 0x32, 0x63, 0x31, 0x64, 0x35, 0x62, 0x61, 0x38, 0x33, 0x32, 0x35, 0x32, 0x61,
				0x32, 0x35, 0x65, 0x36, 0x65, 0x30, 0x34, 0x39, 0x30, 0x39, 0x33, 0x66, 0x36, 0x38, 0x35, 0x36,
				0x65, 0x64, 0x37, 0x34, 0x63, 0x33, 0x63, 0x34, 0x63, 0x37, 0x65, 0x64, 0x32, 0x31, 0x34, 0x34,
				0x65, 0x36, 0x36, 0x30, 0x30, 0x64, 0x31, 0x33, 0x62, 0x37, 0x31, 0x38, 0x35, 0x61, 0x34, 0x38,
				0x61, 0x36, 0x30, 0x31, 0x28, 0x01, 0x12, 0xcf, 0x01, 0x0a, 0x44, 0x0a, 0x40, 0x63, 0x64, 0x63,
				0x34, 0x31, 0x62, 0x62, 0x35, 0x38, 0x64, 0x33, 0x38, 0x35, 0x64, 0x31, 0x32, 0x64, 0x63, 0x63,
				0x36, 0x65, 0x36, 0x30, 0x61, 0x35, 0x38, 0x62, 0x31, 0x36, 0x34, 0x34, 0x35, 0x33, 0x64, 0x33,
				0x36, 0x33, 0x63, 0x37, 0x64, 0x39, 0x37, 0x61, 0x35, 0x39, 0x64, 0x66, 0x38, 0x38, 0x38, 0x35,
				0x37, 0x66, 0x65, 0x38, 0x33, 0x66, 0x34, 0x65, 0x65, 0x63, 0x64, 0x61, 0x37, 0x10, 0x01, 0x12,
				0x84, 0x01, 0x34, 0x31, 0x32, 0x34, 0x34, 0x63, 0x30, 0x61, 0x36, 0x34, 0x35, 0x62, 0x62, 0x62,
				0x36, 0x35, 0x62, 0x30, 0x33, 0x32, 0x31, 0x34, 0x39, 0x65, 0x38, 0x34, 0x37, 0x62, 0x31, 0x31,
				0x34, 0x37, 0x33, 0x66, 0x32, 0x30, 0x63, 0x34, 0x66, 0x61, 0x34, 0x61, 0x33, 0x63, 0x32, 0x32,
				0x31, 0x65, 0x65, 0x31, 0x61, 0x37, 0x35, 0x61, 0x63, 0x64, 0x37, 0x32, 0x30, 0x63, 0x35, 0x36,
				0x31, 0x61, 0x32, 0x31, 0x36, 0x34, 0x39, 0x35, 0x66, 0x62, 0x65, 0x39, 0x38, 0x63, 0x35, 0x34,
				0x66, 0x32, 0x31, 0x30, 0x33, 0x37, 0x36, 0x30, 0x63, 0x66, 0x63, 0x36, 0x36, 0x61, 0x65, 0x62,
				0x64, 0x37, 0x30, 0x37, 0x35, 0x39, 0x63, 0x38, 0x39, 0x64, 0x32, 0x61, 0x37, 0x64, 0x66, 0x39,
				0x63, 0x64, 0x34, 0x34, 0x32, 0x36, 0x33, 0x37, 0x37, 0x63, 0x30, 0x34, 0x35, 0x31, 0x64, 0x30,
				0x34, 0x34, 0x62, 0x61, 0x30, 0x31, 0x28, 0x01, 0x12, 0xcf, 0x01, 0x0a, 0x44, 0x0a, 0x40, 0x64,
				0x36, 0x65, 0x31, 0x66, 0x37, 0x63, 0x34, 0x64, 0x31, 0x35, 0x65, 0x30, 0x63, 0x33, 0x36, 0x63,
				0x34, 0x62, 0x64, 0x32, 0x63, 0x63, 0x38, 0x61, 0x38, 0x35, 0x62, 0x61, 0x33, 0x33, 0x62, 0x39,
				0x62, 0x31, 0x30, 0x39, 0x38, 0x62, 0x37, 0x63, 0x30, 0x31, 0x33, 0x65, 0x65, 0x36, 0x39, 0x34,
				0x38, 0x64, 0x64, 0x63, 0x33, 0x35, 0x38, 0x31, 0x64, 0x66, 0x65, 0x63, 0x61, 0x66, 0x62, 0x10,
				0x01, 0x12, 0x84, 0x01, 0x34, 0x31, 0x62, 0x32, 0x36, 0x32, 0x37, 0x39, 0x37, 0x62, 0x66, 0x32,
				0x64, 0x36, 0x30, 0x62, 0x36, 0x61, 0x30, 0x65, 0x33, 0x39, 0x66, 0x66, 0x32, 0x66, 0x64, 0x64,
				0x61, 0x64, 0x39, 0x64, 0x66, 0x63, 0x65, 0x30, 0x34, 0x39, 0x38, 0x36, 0x35, 0x39, 0x34, 0x63,
				0x31, 0x35, 0x38, 0x63, 0x61, 0x39, 0x63, 0x35, 0x34, 0x39, 0x36, 0x31, 0x33, 0x39, 0x65, 0x31,
				0x64, 0x33, 0x62, 0x39, 0x64, 0x62, 0x30, 0x64, 0x30, 0x63, 0x37, 0x33, 0x63, 0x63, 0x35, 0x62,
				0x39, 0x37, 0x39, 0x61, 0x30, 0x63, 0x30, 0x38, 0x37, 0x34, 0x30, 0x37, 0x33, 0x32, 0x64, 0x31,
				0x33, 0x32, 0x62, 0x64, 0x66, 0x30, 0x62, 0x37, 0x37, 0x37, 0x65, 0x63, 0x62, 0x63, 0x62, 0x64,
				0x66, 0x37, 0x37, 0x34, 0x61, 0x39, 0x65, 0x32, 0x35, 0x37, 0x33, 0x37, 0x34, 0x64, 0x31, 0x31,
				0x38, 0x62, 0x32, 0x66, 0x39, 0x62, 0x30, 0x31, 0x28, 0x01, 0x1a, 0x51, 0x08, 0xc1, 0x99, 0x92,
				0xe4, 0x82, 0x03, 0x12, 0x48, 0x12, 0x46, 0x32, 0x31, 0x30, 0x33, 0x33, 0x62, 0x35, 0x30, 0x64,
				0x62, 0x38, 0x62, 0x32, 0x39, 0x30, 0x38, 0x61, 0x38, 0x61, 0x34, 0x30, 0x64, 0x61, 0x34, 0x61,
				0x62, 0x64, 0x63, 0x35, 0x66, 0x32, 0x63, 0x65, 0x61, 0x30, 0x64, 0x65, 0x64, 0x36, 0x38, 0x63,
				0x63, 0x33, 0x62, 0x32, 0x34, 0x32, 0x35, 0x30, 0x37, 0x64, 0x37, 0x39, 0x66, 0x34, 0x62, 0x31,
				0x30, 0x61, 0x38, 0x35, 0x36, 0x64, 0x39, 0x35, 0x34, 0x66, 0x61, 0x61, 0x62, 0x2a, 0x28, 0x30,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
				0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
			},
			txid:   "c56e80eff72d812a1c3858e7f63b30b8784a70e607f88ab243516452522b8d3f",
			txMass: 6545,
		},
	}

	for i, tt := range tests {
		privBytes, err := hex.DecodeString(tt.priv)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
			continue
		}
		priv := secp256k1.PrivKeyFromBytes(privBytes)

		tx, txMass, err := GenerateTx(priv, tt.inputs, tt.outputs, tt.prefix, tt.feePerInput)
		if err != nil {
			t.Errorf("failed on %d: %v", i, err)
		} else if bytes.Compare(tx, tt.tx) != 0 {
			t.Errorf("failed on %d: tx mismatch: have %x, want %x", i, tx, tt.tx)
		} else if txid := CalculateTxID(hex.EncodeToString(tx)); txid != tt.txid {
			t.Errorf("failed on %d: txid mismatch: have %s, want %s", i, txid, tt.txid)
		} else if txMass != tt.txMass {
			t.Errorf("failed on %d: tx mass mismatch: have %d, want %d", i, txMass, tt.txMass)
		}
	}
}
